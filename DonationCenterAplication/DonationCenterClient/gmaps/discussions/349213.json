[
  {
    "Id": "812608",
    "ThreadId": "349213",
    "Html": "<p>(wrote same article in Issue tracker, although these boards seem to be inactive).</p>\n<p>&nbsp;</p>\n<p>Hi Radioman,<br /> <br /> First of all thanks for this great piece of work! <br /> <br /> I would like to donate a working piece of code to implement the IRoutingProvide on the BingMapProvideBase class. <br /> Since the caching only seems to be able to cache strings and we get an object from the Bing routing service I managed to use serialisation to save the calculated routes in a similar way. <br /> <br /> Although I only use startpoint and endpoint as a key to the route I do not know what all the other parameters mean of the function GetRoutePoints. AvoidHighways could not be implemented with the Bing Map API. (maybe it is better to convert parameters to an  RouteOptions object because of the diversity each provider has?)<br /> <br /> Of course to be able to use this function you will have to provide your Bing ClientKey in the ClientKey parameter of the bing mapprovider class.<br /> <br /> 1.<br /> First of all add a webservice reference to: \"http://dev.virtualearth.net/webser</p>\n<div id=\"DescriptionPanel\">vices/v1/metadata/routeservice/routeservice.wsdl\"<br /> <br /> 2.<br /> Add these namespaces to the class:<br /> using GMap.NET.Internals;<br /> using GMap.NET.net.virtualearth.dev;<br /> using System.Xml.Serialization;<br /> <br /> 3.<br /> Paste this code into the class.<br /> <br /></div>\n<div>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">#region</span> RoutingProvider Members\n\n<span style=\"color: blue;\">public</span> MapRoute GetRoute(PointLatLng start, PointLatLng end, <span style=\"color: blue;\">bool</span> avoidHighways, <span style=\"color: blue;\">bool</span> walkingMode, <span style=\"color: blue;\">int</span> Zoom)\n{\n<span style=\"color: blue;\">string</span> tooltip;\n<span style=\"color: blue;\">int</span> numLevels;\n<span style=\"color: blue;\">int</span> zoomFactor;\nMapRoute ret = <span style=\"color: blue;\">null</span>;\nList&lt;PointLatLng&gt; points = GetRoutePoints(start, end, Zoom, <span style=\"color: blue;\">out</span> tooltip, <span style=\"color: blue;\">out</span> numLevels, <span style=\"color: blue;\">out</span> zoomFactor);\n<span style=\"color: blue;\">if</span> (points != <span style=\"color: blue;\">null</span>)\n{\nret = <span style=\"color: blue;\">new</span> MapRoute(points, tooltip);\n}\n<span style=\"color: blue;\">return</span> ret;\n}\n\n<span style=\"color: blue;\">public</span> MapRoute GetRoute(<span style=\"color: blue;\">string</span> start, <span style=\"color: blue;\">string</span> end, <span style=\"color: blue;\">bool</span> avoidHighways, <span style=\"color: blue;\">bool</span> walkingMode, <span style=\"color: blue;\">int</span> Zoom)\n{\n<span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> NotImplementedException();\n}\n\n<span style=\"color: blue;\">#region</span> -- internals --\n\nList&lt;PointLatLng&gt; GetRoutePoints(PointLatLng start, PointLatLng end, <span style=\"color: blue;\">int</span> zoom, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">string</span> tooltipHtml, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> numLevel, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> zoomFactor)\n{\ntooltipHtml = <span style=\"color: blue;\">string</span>.Empty;\nnumLevel = -1;\nzoomFactor = -1;\n\n<span style=\"color: blue;\">try</span>\n{\n<span style=\"color: blue;\">string</span> url = <span style=\"color: #a31515;\">\"bingroutingservice_\"</span> +\nstart.Lat.ToString() + <span style=\"color: #a31515;\">\"_\"</span> +\nstart.Lng.ToString() + <span style=\"color: #a31515;\">\"_\"</span> +\nend.Lat.ToString() + <span style=\"color: #a31515;\">\"_\"</span> +\nend.Lng.ToString();\n\n<span style=\"color: blue;\">string</span> route = GMaps.Instance.UseRouteCache ? Cache.Instance.GetContent(url, CacheType.RouteCache) : <span style=\"color: blue;\">string</span>.Empty;\nRouteResponse rs = <span style=\"color: blue;\">null</span>;\n\n<span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(route))\n{\nrs = CalculateRoute(start, end);\n<span style=\"color: blue;\">if</span> (rs != <span style=\"color: blue;\">null</span>)\n<span style=\"color: blue;\">if</span> (GMaps.Instance.UseRouteCache)\nCache.Instance.SaveContent(url, CacheType.RouteCache, SerializeToString(rs));\n}\n<span style=\"color: blue;\">else</span>\nrs = SerializeFromString&lt;RouteResponse&gt;(route);\n\nList&lt;PointLatLng&gt; result = <span style=\"color: blue;\">new</span> List&lt;PointLatLng&gt;();\n<span style=\"color: blue;\">foreach</span> (Location l <span style=\"color: blue;\">in</span> rs.Result.RoutePath.Points)\nresult.Add(<span style=\"color: blue;\">new</span> PointLatLng(l.Latitude, l.Longitude));\n\n<span style=\"color: blue;\">return</span> result;\n}\n<span style=\"color: blue;\">catch</span> (Exception ex)\n{\nDebug.WriteLine(<span style=\"color: #a31515;\">\"GetRoutePoints: \"</span> + ex);\n}\n\n<span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\n}\n\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">string</span> SerializeToString(<span style=\"color: blue;\">object</span> obj)\n{\nXmlSerializer serializer = <span style=\"color: blue;\">new</span> XmlSerializer(obj.GetType());\n<span style=\"color: blue;\">using</span> (StringWriter writer = <span style=\"color: blue;\">new</span> StringWriter())\n{\nserializer.Serialize(writer, obj);\n<span style=\"color: blue;\">return</span> writer.ToString();\n}\n}\n\n<span style=\"color: blue;\">private</span> T SerializeFromString&lt;T&gt;(<span style=\"color: blue;\">string</span> xml)\n{\nXmlSerializer serializer = <span style=\"color: blue;\">new</span> XmlSerializer(<span style=\"color: blue;\">typeof</span>(T));\n<span style=\"color: blue;\">using</span> (StringReader reader = <span style=\"color: blue;\">new</span> StringReader(xml))\n<span style=\"color: blue;\">return</span> (T)serializer.Deserialize(reader);\n}\n\n<span style=\"color: green;\">// This method makes the initial CalculateRoute asynchronous request using the results of the Geocode Service.</span>\n<span style=\"color: blue;\">private</span> RouteResponse CalculateRoute(PointLatLng start, PointLatLng end)\n{\n<span style=\"color: green;\">// Set the credentials.</span>\nRouteRequest routeRequest = <span style=\"color: blue;\">new</span> RouteRequest();\nrouteRequest.Credentials = <span style=\"color: blue;\">new</span> Credentials();\nrouteRequest.Credentials.ApplicationId = ClientKey;\n\nrouteRequest.Options = <span style=\"color: blue;\">new</span> RouteOptions();\nrouteRequest.Options.RoutePathType = RoutePathType.Points;\nrouteRequest.Options.RoutePathTypeSpecified = <span style=\"color: blue;\">true</span>;\nrouteRequest.Options.Optimization = RouteOptimization.MinimizeTime;\nrouteRequest.Options.OptimizationSpecified = <span style=\"color: blue;\">true</span>;\nrouteRequest.Options.Mode = TravelMode.Driving;\n\nWaypoint[] waypoints = <span style=\"color: blue;\">new</span> Waypoint[2];\nwaypoints[0] = LongitudeLatitudeToWaypoint(start.Lng, start.Lat);\nwaypoints[1] = LongitudeLatitudeToWaypoint(end.Lng, end.Lat);\nrouteRequest.Waypoints = waypoints;\n\nRouteService r = <span style=\"color: blue;\">new</span> RouteService();\n<span style=\"color: blue;\">return</span> r.CalculateRoute(routeRequest);\n}\n\n<span style=\"color: blue;\">private</span> Waypoint LongitudeLatitudeToWaypoint(<span style=\"color: blue;\">double</span> Longitude, <span style=\"color: blue;\">double</span> Latitude)\n{\nWaypoint waypoint = <span style=\"color: blue;\">new</span> Waypoint();\nwaypoint.Description = <span style=\"color: #a31515;\">\"LON \"</span> + Longitude.ToString() + <span style=\"color: #a31515;\">\"LAT \"</span> + Latitude.ToString();\nwaypoint.Location = <span style=\"color: blue;\">new</span> Location();\nwaypoint.Location.Latitude = Latitude;\nwaypoint.Location.Longitude = Longitude;\nwaypoint.Location.LongitudeSpecified = <span style=\"color: blue;\">true</span>;\nwaypoint.Location.LatitudeSpecified = <span style=\"color: blue;\">true</span>;\n<span style=\"color: blue;\">return</span> waypoint;\n}\n\n<span style=\"color: blue;\">#endregion</span>\n<span style=\"color: blue;\">#endregion</span>\n</pre>\n</div>\n</div>",
    "PostedDate": "2012-03-19T11:12:49.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "812640",
    "ThreadId": "349213",
    "Html": "<p>ok</p>",
    "PostedDate": "2012-03-19T11:55:31.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]