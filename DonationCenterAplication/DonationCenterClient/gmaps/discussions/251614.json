[
  {
    "Id": "588116",
    "ThreadId": "251614",
    "Html": "<p>hi there</p>\n<p>i have just started using the gmap.net for windows forms, and think it is fantastic.</p>\n<p>however, I am noticing that it is not releasing its memory very well at all...&nbsp;</p>\n<p>here is what is happening</p>\n<ol>\n<li>&nbsp;open the applications task manager (TM) says: 33Mb </li>\n<li>Open the form with the map on (ShowDialog) TM: 50Mb </li>\n<li>Scroll about a bit and zoom a bit TM: 82Mb </li>\n<li>Close the map form TM: 54Mb </li>\n<li>open it again TM: 61 Mb </li>\n<li>Scroll and zoom TM: 95Mb </li>\n<li>close form again TM: 64 Mb </li>\n</ol>\n<p>and it continues to take more and more, for sure its not a huuuge amount, but for my purposes its going to bring our server to its knees. I can post some code if that would help at all...</p>\n<p>Can anyone suggest a way around this?</p>\n<p>ps I have tried manually disposing, and garbage collecting. but still not releasing all of what it has taken.</p>\n<p>thanks</p>\n<p>nat</p>",
    "PostedDate": "2011-03-29T03:17:10.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588128",
    "ThreadId": "251614",
    "Html": "<p>try browse it longer, it shouldn't grow much, internal memory default limit is 22MB, so it stabilizes after a while</p>",
    "PostedDate": "2011-03-29T03:52:55.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588137",
    "ThreadId": "251614",
    "Html": "<p>I am using the map to show a number of locations on it, so that the user can see which is the closest to where they are.</p>\r\n<p>they will most likely not have it open for too long, but then may close it (after doing what they were there to do) and open a fresh one..&nbsp;</p>\r\n<p>this is going to be&nbsp;running&nbsp;on a Citrix server &nbsp;as well as on desktops, so if its not releasing memory - as it appears to be doing - by the end of the day, Citrix will be dead, and I will get a slap :)</p>\r\n<p>is there a particular way in which to release the resources, or turn off caching .. or?</p>\r\n<p>any help much appreciated</p>\r\n<p>&nbsp;</p>\r\n<p>thanks</p>\r\n<p>nat<span style=\"white-space: pre;\"> </span></p>",
    "PostedDate": "2011-03-29T04:39:26.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588154",
    "ThreadId": "251614",
    "Html": "are you sure that memory leak occurs in control itself, maybe its in your application?",
    "PostedDate": "2011-03-29T05:24:17.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588165",
    "ThreadId": "251614",
    "Html": "<p>ill paste some code...</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> GoogleMap : BaseControl\r\n    {\r\n\r\n        GMapControl gmc = <span style=\"color: blue;\">new</span> GMap.NET.WindowsForms.GMapControl();\r\n\r\n        <span style=\"color: blue;\">public</span> GoogleMap(MapPoints points)\r\n        {\r\n            InitializeComponent();\r\n\r\n            gmc.MapType = MapType.GoogleMap;\r\n            gmc.MaxZoom = 16;\r\n            gmc.MinZoom = 5;\r\n            gmc.Zoom = 8;\r\n            gmc.CanDragMap = <span style=\"color: blue;\">true</span>;\r\n            gmc.Position = <span style=\"color: blue;\">new</span> PointLatLng(points.HomePoint.Latitude, points.HomePoint.Longitude);\r\n\r\n            <span style=\"color: green;\">//add the overlay</span>\r\n            GMapOverlay objects = <span style=\"color: blue;\">new</span> GMapOverlay(gmc, <span style=\"color: #a31515;\">\"markeroverlay\"</span>);\r\n            gmc.Overlays.Add(objects);\r\n\r\n            <span style=\"color: green;\">//now add the points</span>\r\n            PointLatLng? pos = <span style=\"color: blue;\">new</span> PointLatLng(points.HomePoint.Latitude, points.HomePoint.Longitude);\r\n            GMapMarkerGoogleGreen m = <span style=\"color: blue;\">new</span> GMapMarkerGoogleGreen(pos.Value);\r\n            m.ToolTip = <span style=\"color: blue;\">new</span> GMapRoundedToolTip(m);\r\n            m.ToolTipText = <span style=\"color: #a31515;\">\"Home\"</span>;\r\n            m.ToolTipMode = MarkerTooltipMode.Always;\r\n            objects.Markers.Add(m);\r\n\r\n            pos = <span style=\"color: blue;\">new</span> PointLatLng(points.WorkPoint.Latitude, points.WorkPoint.Longitude);\r\n            m = <span style=\"color: blue;\">new</span> GMapMarkerGoogleGreen(pos.Value);\r\n            m.ToolTip = <span style=\"color: blue;\">new</span> GMapRoundedToolTip(m);\r\n            m.ToolTipText = <span style=\"color: #a31515;\">\"Work\"</span>;\r\n            m.ToolTipMode = MarkerTooltipMode.Always;\r\n            objects.Markers.Add(m);\r\n\r\n            <span style=\"color: blue;\">if</span> (points.MarkerLocations.Count &gt; 0)\r\n            {\r\n                <span style=\"color: blue;\">foreach</span> (MapPoint mp <span style=\"color: blue;\">in</span> points.MarkerLocations)\r\n                {\r\n                    objects.Markers.Add(GetMarker(mp));\r\n                }\r\n            }\r\n            gmc.Dock = DockStyle.Fill;\r\n            <span style=\"color: blue;\">this</span>.Controls.Add(gmc);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> ZoomOut()\r\n        {\r\n            gmc.Zoom -= 1;\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> ZoomIn()\r\n        {\r\n            gmc.Zoom += 1;\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> GMapMarker GetMarker(MapPoint mp)\r\n        {\r\n            PointLatLng pos = <span style=\"color: blue;\">new</span> PointLatLng(mp.Latitude, mp.Longitude);\r\n            GMapMarkerGoogleRed mm = <span style=\"color: blue;\">new</span> GMapMarkerGoogleRed(pos);\r\n            mm.ToolTip = <span style=\"color: blue;\">new</span> GMapRoundedToolTip(mm);\r\n            mm.ToolTipMode = MarkerTooltipMode.Always;\r\n            mm.ToolTipText = mp.PointLetter;\r\n\r\n            <span style=\"color: blue;\">return</span> mm;\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> CentreOnLatLong(<span style=\"color: blue;\">float</span> lat, <span style=\"color: blue;\">float</span> lng)\r\n        {\r\n            PointLatLng p = <span style=\"color: blue;\">new</span> PointLatLng(lat, lng);\r\n            gmc.Position = p;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>and the form that containst he User Control that has the map in</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> (SqlConnection conn = DataHelper.GetdbConnection())\r\n            {\r\n                <span style=\"color: blue;\">using</span> (SqlCommand cmd = DataHelper.GetSPCommand(spName, conn))\r\n                {\r\n                    cmd.Parameters.AddRange(parms.ToArray());\r\n\r\n                    <span style=\"color: blue;\">using</span> (SqlDataAdapter da = <span style=\"color: blue;\">new</span> SqlDataAdapter(cmd))\r\n                    {\r\n                        DataTable dt = <span style=\"color: blue;\">new</span> DataTable();\r\n                        da.Fill(dt);\r\n                        dt.Columns.Add(<span style=\"color: blue;\">new</span> DataColumn(<span style=\"color: #a31515;\">\"MapLetter\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: blue;\">string</span>)));\r\n\r\n                        <span style=\"color: green;\">//now pass all the bits to the google map</span>\r\n                        MapPoints mps = <span style=\"color: blue;\">new</span> MapPoints(currentCase.Employee.Postcode, currentCase.Employee.Location.Postcode, CentreType.Home);\r\n                        List&lt;MapPoint&gt; l = <span style=\"color: blue;\">new</span> List&lt;MapPoint&gt;();\r\n                        <span style=\"color: blue;\">int</span> cnt = 0;\r\n                        <span style=\"color: blue;\">foreach</span> (DataRow dr <span style=\"color: blue;\">in</span> dt.Rows)\r\n                        {\r\n                            MapPoint p = <span style=\"color: blue;\">new</span> MapPoint();\r\n                            p.Latitude = <span style=\"color: blue;\">double</span>.Parse(dr[<span style=\"color: #a31515;\">\"flClinicLat\"</span>].ToString());\r\n                            p.Longitude = <span style=\"color: blue;\">double</span>.Parse(dr[<span style=\"color: #a31515;\">\"flClinicLong\"</span>].ToString());\r\n                            p.PointLetter = alpha[cnt].ToString();\r\n                            l.Add(p);\r\n\r\n                            dr[<span style=\"color: #a31515;\">\"MapLetter\"</span>] = alpha[cnt].ToString();\r\n                            cnt++;\r\n                        }\r\n\r\n                        ggcResults.DataSource = dt;\r\n                        mps.MarkerLocations = l;\r\n                        gm = <span style=\"color: blue;\">new</span> GoogleMap(mps);\r\n                        pnlMapHolder.Controls.Add(gm);\r\n                    }\r\n                }\r\n            }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>and when it closes</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>                pnlMapHolder.Controls.Remove(gm);//tried with and without this and the following\r\n                gm = <span style=\"color: blue;\">null</span>;\r\n                pnlMapHolder.Dispose();\r\n                <span style=\"color: blue;\">this</span>.DialogResult = System.Windows.Forms.DialogResult.OK;\r\n                <span style=\"color: blue;\">this</span>.Close();\r\n</pre>\r\n</div>\r\n..???</p>",
    "PostedDate": "2011-03-29T05:42:02.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588174",
    "ThreadId": "251614",
    "Html": "does it leaks without Your code? ;} did you used memory profiler to track the objects that leak?",
    "PostedDate": "2011-03-29T05:49:14.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588178",
    "ThreadId": "251614",
    "Html": "<p>I was looking in task manager as my first post. I can go further to see what the mem profiler is doing, but there is nothing else on that page other than a gridview.</p>\n<p>cant see anything else causing it, particularly as I can see the memory usage go up when I use the control, the problem is that it doesn't go down again...</p>\n<p>the point is, that after the call to pnlMapHolder.Dispose(), the memory usage does NOT drop. ...&nbsp;</p>",
    "PostedDate": "2011-03-29T05:56:39.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588179",
    "ThreadId": "251614",
    "Html": "does it grows infinitely?",
    "PostedDate": "2011-03-29T06:01:27.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588188",
    "ThreadId": "251614",
    "Html": "<p>well i have opened and closed it now 4 or 5 times and the mem usage is up to over 200mb now...</p>\r\n<p>so possibly yes it would keep on going up..&nbsp;</p>",
    "PostedDate": "2011-03-29T06:18:59.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588195",
    "ThreadId": "251614",
    "Html": "reuse objects",
    "PostedDate": "2011-03-29T06:25:51.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588260",
    "ThreadId": "251614",
    "Html": "<p>Hi,</p>\r\n<p>Having modified the code and setting LevelsKeepInMemory = 0, we are finding that generally the memory usage is lower when actually using the control, however we are unable to dispose the objects as they aren't IDisposable, what appears to be happening is that the control is holding the images in memory for an indeterminate period of time afterwards, in the time it has taken me to write this it is still holding memory. I have looped through each marker in each overlay and set each marker and each overlay to null manually which appears to have reduced the memory usage a little, but it still holds around 4-20Mb (depending on the amount of scrolling and zooming done on the form)</p>\r\n<p>Is there a public property or method anywhere in the library that stores the image so I can manually get rid of that as well?</p>",
    "PostedDate": "2011-03-29T08:19:22.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588470",
    "ThreadId": "251614",
    "Html": "<p>it's .net, you can't 'get rid' ;}</p>",
    "PostedDate": "2011-03-29T14:22:46.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "610890",
    "ThreadId": "251614",
    "Html": "<p>I am experiencing the same memory leak as reported here.</p>\n<p>The only thing i noticed (since im not too experienced with .Net GC / memory) is that the \"# of current logical Threads\"-counter keeps going up each time i create the form holding the map.</p>\n<p>According to <a href=\"http://www.codeproject.com/KB/dotnet/Memory_Leak_Detection.aspx\" target=\"_blank\"> an article on codeproject,</a> this would mean that we're dealing with a leak in the Stack memory.</p>\n<p>I tried some random things to rule out my part of the code, but it doesnt change anything.</p>\n<ul>\n<li>I tried putting the ShowDialog inside a using block -&gt; no change </li>\n<li>I tried using the Show() method -&gt; no change </li>\n<li>I tried to call MainMap.Dispose() in the Form_Close event -&gt; no change. </li>\n</ul>\n<p>&nbsp;</p>\n<p>The only way i could get rid of the memory leak, was to create the form (and the map) only once, and reusing the same objects.</p>",
    "PostedDate": "2011-05-11T05:40:19.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "610903",
    "ThreadId": "251614",
    "Html": "<p>reusing objects is always the best choice, anyway current implementation creates few threads for each control, you can change that list to static, so it will share threads across all controls, maybe i'll make it as default, need some testing...</p>",
    "PostedDate": "2011-05-11T05:57:19.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656384",
    "ThreadId": "251614",
    "Html": "<p>Hi,</p>\r\n<p>I can confirm the same problem with memory leaking. The same issue - one form with GMap.NET component, opening and closing the form on and on leads to memory leaking.</p>\r\n<p>First, I found out there are 5 threads (for PC) for loading tiles with timeout 5 mins. These threads are still alive after closing the form. It is not a bug but I would set this timeout to 30 seconds as is usual timeout for loading from internet. File \"Core.cs\":</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> <span style=\"color: blue;\">int</span> WaitForTileLoadThreadTimeout = 30 * 1000; //30 s\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Second, I found out there is one thread which does not close at all and blocks releasing instances although the form is disposed. The thread waits for a signal but the signal will never come I guess. I mean file \"GMapControl.cs\", BackgroundWorker called \"invalidator\", method \"invalidatorWatch\" and command \"Core.Refresh.WaitOne()\".</p>\r\n<p>My simple solution is (for changeset <span style=\"font-weight: bold;\">aae170acdd8d</span>):</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>GMapControl.cs\r\n===================================================================\r\n@@ -361,6 +361,7 @@\r\n       Graphics gxOff;\r\n \r\n       <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> WindowsFormsImageProxy wimg = <span style=\"color: blue;\">new</span> WindowsFormsImageProxy();\r\n+      BackgroundWorker invalidator; <span style=\"color: green;\">//PKP</span>\r\n \r\n <span style=\"color: blue;\">#if</span> !DESIGN\r\n       <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n@@ -410,10 +411,11 @@\r\n             }\r\n \r\n             <span style=\"color: green;\">// start tile loading monitor</span>\r\n-            BackgroundWorker invalidator = <span style=\"color: blue;\">new</span> BackgroundWorker();\r\n+            invalidator = <span style=\"color: blue;\">new</span> BackgroundWorker(); <span style=\"color: green;\">//PKP</span>\r\n             invalidator.WorkerReportsProgress = <span style=\"color: blue;\">true</span>;\r\n             invalidator.DoWork += <span style=\"color: blue;\">new</span> DoWorkEventHandler(invalidatorWatch);\r\n             invalidator.ProgressChanged += <span style=\"color: blue;\">new</span> ProgressChangedEventHandler(invalidatorEngage);\r\n+            invalidator.WorkerSupportsCancellation = <span style=\"color: blue;\">true</span>; <span style=\"color: green;\">//PKP</span>\r\n             invalidator.RunWorkerAsync();\r\n          }\r\n       }\r\n@@ -436,8 +438,13 @@\r\n          TimeSpan delta;\r\n          DateTime now = DateTime.Now;\r\n \r\n          <span style=\"color: blue;\">while</span>(!skiped &amp;&amp; Core.Refresh.WaitOne() || (Core.Refresh.WaitOne(spanMs, <span style=\"color: blue;\">false</span>) || <span style=\"color: blue;\">true</span>))\r\n          {\r\n+             <span style=\"color: blue;\">if</span> (w.CancellationPending) <span style=\"color: green;\">//PKP</span>\r\n+             {\r\n+                 e.Cancel = <span style=\"color: blue;\">true</span>; <span style=\"color: green;\">//PKP</span>\r\n+                 <span style=\"color: blue;\">break</span>; <span style=\"color: green;\">//PKP</span>\r\n+             }\r\n \r\n             now = DateTime.Now;\r\n             <span style=\"color: blue;\">lock</span>(invalidationLock)\r\n@@ -1113,6 +1120,12 @@\r\n \r\n       <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnHandleDestroyed(EventArgs e)\r\n       {\r\n+          <span style=\"color: blue;\">if</span> (invalidator.IsBusy)           <span style=\"color: green;\">//PKP</span>\r\n+          {\r\n+              invalidator.CancelAsync(); <span style=\"color: green;\">//PKP</span>\r\n+              Invalidate(); <span style=\"color: green;\">//PKP</span>\r\n+          }\r\n+\r\n          Core.OnMapClose();\r\n          Core.ApplicationExit();\r\n \r\nYou can download it <a title=\"GMapControl.cs\" href=\"http://intranet.webtica.com/petr/GMapControl.zip\">here</a>.\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-08-11T02:07:17.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657641",
    "ThreadId": "251614",
    "Html": "<p>invalidator thread bug fixed, thx</p>",
    "PostedDate": "2011-08-13T05:15:54.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007923",
    "ThreadId": "251614",
    "Html": "Disregard this post.<br />\n",
    "PostedDate": "2013-02-27T16:23:41.853-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]