[
  {
    "Id": "718020",
    "ThreadId": "284396",
    "Html": "\r\n<p>First I just want to thank you radioman for this great control.&nbsp; I work for a small development group in the FAA and since we&rsquo;ve found your control earlier this year, we&rsquo;ve utilized it in several of our applications.</p>\r\n<p>Our current application requires us to allow the user to pre-fetch tiles while online and then use cached tiles while offline.&nbsp; So they will be presented with a menu where we allow them to select an area to pre-fetch and the desired zoom levels.&nbsp;\r\n I know this is possible after looking at the examples in your code.&nbsp; After some experimentation I have some questions.</p>\r\n<p>1. We want the tile database to be transparent to the user and to never be size limited.&nbsp; If it grows to 1 TB that is perfectly fine.&nbsp; So anytime we ever pre-fetch tiles we want them to go into the database.&nbsp; And we never want to remove any\r\n previously fetched tiles.&nbsp; Is this possible?&nbsp; Are there any flags or properties I need to set for this behavior?<br>\r\n2. What is the best built-in method for pre-fetching tiles to achieve the above desired behavior?&nbsp; I checked out GMap.NET.WindowsForms.TilePrefetcher.cs and saw you have a CacheTiles method.&nbsp; Is this the best model to follow to achieve the above desired\r\n behavior?<br>\r\n3. Is there anyway you can recommend for threading the pre-fetch process?&nbsp; Or is that going to be a bad idea considering we are writing to the database and don&rsquo;t want concurrent writes?</p>\r\n<p>Any help is appreciated.&nbsp; Thanks!</p>\r\n",
    "PostedDate": "2011-12-28T13:19:26.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "718021",
    "ThreadId": "284396",
    "Html": "<p>To clarify #3: I mean creating multiple download threads at once to speed the process.</p>",
    "PostedDate": "2011-12-28T13:20:55.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722392",
    "ThreadId": "284396",
    "Html": "<ol>\r\n<li>it's done automatically, there is theoretical cache size limit, ~60TB</li>\r\n<li>tileprefetcher use one thread, if you use more, you may be blocked by tile provider, it can block you even if you requesting to fast ;}</li>\r\n</ol>",
    "PostedDate": "2012-01-09T04:48:52.41-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722400",
    "ThreadId": "284396",
    "Html": "<p>1. thats perfect for what i need<br />2. i am only using one thread with a sleep of 100 ms between tiles.&nbsp; i haven't been blocked <em>yet</em> (for anyone curious that is against the Bing servers).</p>\r\n<p>i have it written and working as i need it.&nbsp; i did re-write your tileprefetcher.cs so that i could pass it multiple tile providers and a min/max zoom level.&nbsp; so one call to begin pre-fetching grabs all the desired zoom levels from all the requested tile providers.&nbsp; for anyone interested here is my code:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.ComponentModel;\r\n<span style=\"color: blue;\">using</span> System.Windows.Forms;\r\n<span style=\"color: blue;\">using</span> GMap.NET;\r\n<span style=\"color: blue;\">using</span> GMap.NET.Internals;\r\n<span style=\"color: blue;\">using</span> GMap.NET.MapProviders;\r\n\r\n<span style=\"color: blue;\">namespace</span> FAA.Spectrum.DirectionFinder.Forms\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> PrefetchTiles : Form\r\n    {\r\n        BackgroundWorker worker = <span style=\"color: blue;\">new</span> BackgroundWorker();\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> ShowCompleteMessage = <span style=\"color: blue;\">false</span>;\r\n        \r\n        <span style=\"color: blue;\">public</span> PrefetchTiles()\r\n        {\r\n            InitializeComponent();\r\n\r\n            worker.WorkerReportsProgress = <span style=\"color: blue;\">true</span>;\r\n            worker.WorkerSupportsCancellation = <span style=\"color: blue;\">true</span>;\r\n            worker.ProgressChanged += <span style=\"color: blue;\">new</span> ProgressChangedEventHandler(worker_ProgressChanged);\r\n            worker.DoWork += <span style=\"color: blue;\">new</span> DoWorkEventHandler(worker_DoWork);\r\n            worker.RunWorkerCompleted += <span style=\"color: blue;\">new</span> RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);\r\n        }\r\n\r\n        <span style=\"color: blue;\">#region</span> Form Loader/Unloader\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Start(RectLatLng area, <span style=\"color: blue;\">int</span> minZoom, <span style=\"color: blue;\">int</span> maxZoom, GMapProvider[] providers, <span style=\"color: blue;\">int</span> sleep, <span style=\"color: blue;\">string</span> cacheLocation)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (!worker.IsBusy)\r\n            {\r\n                <span style=\"color: blue;\">this</span>.label1.Text = <span style=\"color: #a31515;\">\"Please wait: Creating task list...\"</span>;\r\n                <span style=\"color: blue;\">this</span>.label2.Text = <span style=\"color: #a31515;\">\"Calculating Remaining Time\"</span>;\r\n                <span style=\"color: blue;\">this</span>.label3.Text = <span style=\"color: #a31515;\">\"Saving maps to cache database located at:\\n\"</span> + cacheLocation;\r\n                <span style=\"color: blue;\">this</span>.progressBar1.Value = 0;\r\n                \r\n                WorkerArgs args = <span style=\"color: blue;\">new</span> WorkerArgs();\r\n                args.MinZoom = minZoom;\r\n                args.MaxZoom = maxZoom;\r\n                args.Area = area;\r\n                args.Providers = providers;\r\n                args.TileSleeper = sleep;\r\n                \r\n                GMaps.Instance.UseMemoryCache = <span style=\"color: blue;\">false</span>;\r\n                GMaps.Instance.CacheOnIdleRead = <span style=\"color: blue;\">false</span>;\r\n                \r\n                worker.RunWorkerAsync(args);\r\n\r\n                <span style=\"color: blue;\">this</span>.ShowDialog();\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Stop()\r\n        {\r\n            <span style=\"color: blue;\">if</span> (worker.IsBusy)\r\n                worker.CancelAsync();\r\n        }\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n        <span style=\"color: blue;\">#region</span> Background Worker\r\n        <span style=\"color: blue;\">void</span> worker_DoWork(<span style=\"color: blue;\">object</span> sender, DoWorkEventArgs e)\r\n        {\r\n            BackgroundWorker worker = (BackgroundWorker)sender;\r\n            WorkerArgs args = (WorkerArgs)e.Argument;\r\n            List&lt;GPoint&gt; list = <span style=\"color: blue;\">new</span> List&lt;GPoint&gt;();\r\n\r\n            ProgressObject.Reset();\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = args.MinZoom; z &lt;= args.MaxZoom; z++)\r\n                <span style=\"color: blue;\">foreach</span> (GMapProvider provider <span style=\"color: blue;\">in</span> args.Providers)\r\n                    ProgressObject.TotalTiles += (<span style=\"color: blue;\">ulong</span>)provider.Projection.GetAreaTileList(args.Area, z, 0).Count;\r\n            \r\n            ProgressObject.StartTimer();\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = args.MinZoom; z &lt;= args.MaxZoom; z++)\r\n            {\r\n                <span style=\"color: blue;\">if</span> (worker.CancellationPending)\r\n                    <span style=\"color: blue;\">break</span>;\r\n\r\n                <span style=\"color: blue;\">foreach</span> (GMapProvider provider <span style=\"color: blue;\">in</span> args.Providers)\r\n                {\r\n                    <span style=\"color: blue;\">if</span> (worker.CancellationPending)\r\n                        <span style=\"color: blue;\">break</span>;\r\n\r\n                    <span style=\"color: blue;\">if</span> (list != <span style=\"color: blue;\">null</span>)\r\n                    {\r\n                        list.Clear();\r\n                        list = <span style=\"color: blue;\">null</span>;\r\n                    }\r\n\r\n                    <span style=\"color: green;\">// Get the tiles we need to download</span>\r\n                    list = provider.Projection.GetAreaTileList(args.Area, z, 0);\r\n                    Shuffle&lt;GPoint&gt;(list);\r\n\r\n                    <span style=\"color: blue;\">int</span> numfiles = list.Count;\r\n\r\n                    <span style=\"color: green;\">// Download all tiles in the list</span>\r\n                    <span style=\"color: blue;\">int</span> retry = 0;\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; numfiles; i++)\r\n                    {\r\n                        <span style=\"color: blue;\">if</span> (worker.CancellationPending)\r\n                            <span style=\"color: blue;\">break</span>;\r\n\r\n                        <span style=\"color: green;\">// Download the tile</span>\r\n                        <span style=\"color: green;\">// Retry if there is a failure</span>\r\n                        <span style=\"color: blue;\">if</span> (CacheTiles(z, list[i], provider))\r\n                            retry = 0;\r\n                        <span style=\"color: blue;\">else</span>\r\n                            <span style=\"color: blue;\">if</span> (++retry &lt;= 1)\r\n                            {\r\n                                i--;\r\n                                System.Threading.Thread.Sleep(1111);\r\n                                <span style=\"color: blue;\">continue</span>;\r\n                            }\r\n                            <span style=\"color: blue;\">else</span>\r\n                                retry = 0;\r\n\r\n                        ProgressObject.AddFileCompleted();\r\n\r\n                        worker.ReportProgress(0, <span style=\"color: blue;\">null</span>);\r\n                        System.Threading.Thread.Sleep(args.TileSleeper);\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color: blue;\">if</span> (worker.CancellationPending)\r\n                e.Cancel = <span style=\"color: blue;\">true</span>;\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> worker_ProgressChanged(<span style=\"color: blue;\">object</span> sender, ProgressChangedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.label1.Text = <span style=\"color: #a31515;\">\"Overall progress: \"</span> + ProgressObject.OverallCompleted + <span style=\"color: #a31515;\">\" of \"</span> + ProgressObject.TotalTiles + <span style=\"color: #a31515;\">\" files (\"</span> + ProgressObject.OverallProgress + <span style=\"color: #a31515;\">\"%)\"</span>;\r\n            \r\n            <span style=\"color: blue;\">if</span> (ProgressObject.OverallProgress == 0)\r\n                <span style=\"color: blue;\">this</span>.label2.Text = <span style=\"color: #a31515;\">\"Calculating Remaining Time\"</span>;\r\n            <span style=\"color: blue;\">else</span>\r\n                <span style=\"color: blue;\">this</span>.label2.Text = ProgressObject.EstimatedCompletionTime.ToString(<span style=\"color: #a31515;\">\"d\\\\ \\\\D\\\\a\\\\y\\\\s\\\\,\\\\ h\\\\ \\\\H\\\\o\\\\u\\\\r\\\\s\\\\,\\\\ m\\\\ \\\\M\\\\i\\\\n\\\\s\"</span>) + <span style=\"color: #a31515;\">\" Remaining\"</span>;\r\n            \r\n            <span style=\"color: blue;\">this</span>.progressBar1.Value = ProgressObject.OverallProgress;\r\n        }\r\n        \r\n        <span style=\"color: blue;\">void</span> worker_RunWorkerCompleted(<span style=\"color: blue;\">object</span> sender, RunWorkerCompletedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (ShowCompleteMessage)\r\n            {\r\n                <span style=\"color: blue;\">if</span> (!e.Cancelled)\r\n                    MessageBox.Show(<span style=\"color: #a31515;\">\"Prefetch Complete!\"</span>);\r\n                <span style=\"color: blue;\">else</span>\r\n                    MessageBox.Show(<span style=\"color: #a31515;\">\"Prefetch Canceled!\\n\\nOverall progress: \"</span> + ProgressObject.OverallCompleted + <span style=\"color: #a31515;\">\" of \"</span> + ProgressObject.TotalTiles + <span style=\"color: #a31515;\">\" files (\"</span> + ProgressObject.OverallProgress + <span style=\"color: #a31515;\">\"%)\"</span>);\r\n            }\r\n\r\n            GMaps.Instance.UseMemoryCache = <span style=\"color: blue;\">true</span>;\r\n            GMaps.Instance.CacheOnIdleRead = <span style=\"color: blue;\">true</span>;\r\n\r\n            <span style=\"color: blue;\">this</span>.Close();\r\n        }\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n        <span style=\"color: blue;\">#region</span> Standalone Methods\r\n        <span style=\"color: blue;\">bool</span> CacheTiles(<span style=\"color: blue;\">int</span> zoom, GPoint p, GMapProvider provider)\r\n        {\r\n            <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">var</span> pr <span style=\"color: blue;\">in</span> provider.Overlays)\r\n            {\r\n                Exception ex;\r\n                PureImage img;\r\n\r\n                img = GMaps.Instance.GetImageFrom(pr, p, zoom, <span style=\"color: blue;\">out</span> ex);\r\n\r\n                <span style=\"color: blue;\">if</span> (img != <span style=\"color: blue;\">null</span>)\r\n                {\r\n                    img.Dispose();\r\n                    img = <span style=\"color: blue;\">null</span>;\r\n                }\r\n                <span style=\"color: blue;\">else</span>\r\n                {\r\n                    <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>;\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> Shuffle&lt;T&gt;(List&lt;T&gt; deck)\r\n        {\r\n            <span style=\"color: blue;\">int</span> N = deck.Count;\r\n            Random random = <span style=\"color: blue;\">new</span> System.Random(0);\r\n\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; N; ++i)\r\n            {\r\n                <span style=\"color: blue;\">int</span> r = i + (<span style=\"color: blue;\">int</span>)(random.Next(N - i));\r\n                T t = deck[r];\r\n                deck[r] = deck[i];\r\n                deck[i] = t;\r\n            }\r\n        }\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n        <span style=\"color: blue;\">#region</span> Form Event Handlers\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Prefetch_PreviewKeyDown(<span style=\"color: blue;\">object</span> sender, PreviewKeyDownEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (e.KeyCode == Keys.Escape)\r\n            {\r\n                <span style=\"color: blue;\">this</span>.Close();\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Prefetch_FormClosed(<span style=\"color: blue;\">object</span> sender, FormClosedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.Stop();\r\n        }\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n    }\r\n\r\n    <span style=\"color: blue;\">#region</span> Helper Classes\r\n    <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">class</span> ProgressObject\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ulong</span> TotalTiles = 0;\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ulong</span> OverallCompleted = 0;\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> OverallProgress = 0;\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">private</span> DateTime startTime = <span style=\"color: blue;\">new</span> DateTime();\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> TimeSpan EstimatedCompletionTime = <span style=\"color: blue;\">new</span> TimeSpan(0);\r\n\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> AddFileCompleted()\r\n        {\r\n            OverallCompleted++;\r\n            OverallProgress = Convert.ToInt32(OverallCompleted * 100 / TotalTiles);\r\n            <span style=\"color: blue;\">if</span> (OverallProgress != 0)\r\n                EstimatedCompletionTime = <span style=\"color: blue;\">new</span> TimeSpan((DateTime.Now - startTime).Ticks * 100 / OverallProgress);\r\n        }\r\n\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Reset()\r\n        {\r\n            TotalTiles = 0;\r\n            OverallCompleted = 0;\r\n            OverallProgress = 0;\r\n        }\r\n\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> StartTimer()\r\n        {\r\n            startTime = DateTime.Now;\r\n        }\r\n    }\r\n\r\n    <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">class</span> WorkerArgs\r\n    {\r\n        <span style=\"color: blue;\">public</span> GMapProvider[] Providers;\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> TileSleeper;\r\n        <span style=\"color: blue;\">public</span> RectLatLng Area;\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> MinZoom;\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> MaxZoom;\r\n    }\r\n    <span style=\"color: blue;\">#endregion</span>\r\n}\r\n</pre>\r\n<pre>And here is my single call to begin pre-fetching:<div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">if</span> (MainMap.Manager.Mode == AccessMode.ServerAndCache)\r\n{\r\n    RectLatLng area = MainMap.CurrentViewArea;\r\n                        \r\n    DialogResult res = MessageBox.Show(<span style=\"color: #a31515;\">\"This process will pre-fetch (download) mapping\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"data to your computer for use offline.  Your\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"current screen view area will be downloaded at\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"all possible zoom levels.\\n\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"This process may take up to several hours\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"depending on the size of the geographical area.\\n\\n\"</span> +\r\n                                        <span style=\"color: #a31515;\">\"Proceed?\"</span>,\r\n                                        <span style=\"color: #a31515;\">\"Map Data\"</span>, MessageBoxButtons.YesNo);\r\n    <span style=\"color: blue;\">if</span> (res == DialogResult.Yes)\r\n    {\r\n        PrefetchTiles obj = <span style=\"color: blue;\">new</span> PrefetchTiles();\r\n        obj.ShowCompleteMessage = <span style=\"color: blue;\">true</span>;\r\n        obj.Start(area, MainMap.MinZoom, MainMap.MaxZoom, <span style=\"color: blue;\">new</span> GMapProvider[] { GMapProviders.BingMap, GMapProviders.BingHybridMap }, 100, MainMap.CacheLocation);\r\n    }\r\n}\r\n<span style=\"color: blue;\">else</span>\r\n    MessageBox.Show(<span style=\"color: #a31515;\">\"Can't perform this action while offline.\"</span>, <span style=\"color: #a31515;\">\"Map Data\"</span>, MessageBoxButtons.OK);\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2012-01-09T04:59:51.147-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722423",
    "ThreadId": "284396",
    "Html": "<p>p.s. to be sure you can use map.Manager.<strong>OnTileCacheComplete</strong> event to know when all tile data is flushed to the disk</p>",
    "PostedDate": "2012-01-09T05:19:23.2-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]