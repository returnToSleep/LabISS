[
  {
    "Id": "717091",
    "ThreadId": "284140",
    "Html": "\r\n<p>Hi!</p>\r\n<p>Thanks for this cool app)</p>\r\n<p>As I can see it's not possible to handle click event on a route, is it? Or&nbsp;I missed it?</p>\r\n<p>And the second: it would be a good feature if you use&nbsp;<code>alternatives</code><span>&nbsp;parameter (like it is in google maps api) in a route request for ability to choose a route that user prefer.</span></p>\r\n",
    "PostedDate": "2011-12-25T16:50:35.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722367",
    "ThreadId": "284140",
    "Html": "<p>yes, WindowsForms version doesn't have this event</p>\r\n<p><em>alternatives</em>&nbsp;option would be nice</p>",
    "PostedDate": "2012-01-09T03:56:24.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "763131",
    "ThreadId": "284140",
    "Html": "<p>radioman, is there any chance you could add the OnClick, OnEnter and OnLeave events to routes along with the alternatives parameter?</p>\r\n<p>Please, please, please :)</p>\r\n<p>Thanks</p>\r\n<p>Charlotte</p>",
    "PostedDate": "2012-02-14T06:08:43.5-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "763175",
    "ThreadId": "284140",
    "Html": "<p>tell me how and i'll do it in the instant ;}</p>",
    "PostedDate": "2012-02-14T06:18:37.007-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "767276",
    "ThreadId": "284140",
    "Html": "<p>Not sure radioman, but I figured it must be problematic otherwise you would have already implemented something on the routes - I'm assuming the issue is that the routes are so thin (in terms of pixels) that it is difficult to capture the events [is my assumption correct or is it something else]...</p>\r\n<p>If my assumption is correct on the issue, how about the following to solve the issue...</p>\r\n<p>If there was an internally used buffer area of <em>x</em> pixels (user defined on creating) around the route that was not visible but only used for the purpose of the OnClick, OnEnter and OnLeave events, it would be possible to then click on the route to select it to give the user the ability to delete it or adjust the vertices on it the way we can on polygons. It's almost like the route needs it's own internal polygon property which is not visible to the user but is used for this buffer area. Then, if the mouse pointer is over this hidden polygon, the 3 events work in the same way the normal polygon does. On defining the route, if a buffer size of 0 was specified, no internal polygon object would be created thus the route is not selectable.&nbsp;Does this make sense? Sounds good in theory perhaps but may not be easy to implement in reality and obviously your bloating things a bit if you have a lot of routes on the screen but I could live with that...</p>\r\n<p>Regards the alternatives keyword - any chance of doing something with it?</p>\r\n<p>Thanks and kind regards</p>\r\n<p>Charlotte</p>",
    "PostedDate": "2012-02-15T03:13:33.337-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "767338",
    "ThreadId": "284140",
    "Html": "<p>so far no one did anything on that ;}</p>",
    "PostedDate": "2012-02-15T03:50:58.08-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "769796",
    "ThreadId": "284140",
    "Html": "<p>I did :-) But in a slightly different way, I needed to display different colored \"Offset bars\" along a given route (road, the colors symbolize a condition for this road, e.g. pot holes,...). Check out this screenshot:</p>\n<p>&nbsp;</p>\n<p><img src=\"http://dl.dropbox.com/u/7026787/Offsetbars.png\" alt=\"Offsetbars\" /></p>\n<p>&nbsp;</p>\n<p>I did it, by storing the GraphicsPath of each part of an OffsetBar, and then checking if x,y is inside using GraphicsPath.IsVisible(x,y) method (similar, as radioman did it with the markers). Check out this code snippet in a class that derives from GMapControl.cs:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Handle mouse move event</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"sender\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"e\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Map_MouseMove(<span style=\"color: blue;\">object</span> sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            <span style=\"color: green;\">//Check if the mouse is over a GraphicsPath of an Offset bar</span>\n            <span style=\"color: blue;\">if</span> (!<span style=\"color: blue;\">this</span>.IsDragging &amp;&amp; <span style=\"color: blue;\">this</span>.ShowOffsetBars)\n            {\n                <span style=\"color: blue;\">bool</span> mouseover = <span style=\"color: blue;\">false</span>;\n\n                <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">var</span> o <span style=\"color: blue;\">in</span> <span style=\"color: blue;\">this</span>.Overlays)\n                {\n                    <span style=\"color: blue;\">if</span> (o != <span style=\"color: blue;\">null</span> &amp;&amp; o.IsVisibile)\n                    {\n                        <span style=\"color: blue;\">foreach</span> (GMapRoute r <span style=\"color: blue;\">in</span> o.Routes)\n                        {\n                            <span style=\"color: blue;\">if</span> (r.IsVisible &amp;&amp; (r <span style=\"color: blue;\">is</span> GMapRouteEnhanced))\n                            {\n                                GMapRouteEnhanced re = (GMapRouteEnhanced)r;\n                                <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">var</span> ob <span style=\"color: blue;\">in</span> re.OffsetBars)\n                                {\n                                    <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">var</span> part <span style=\"color: blue;\">in</span> ob.Parts)\n                                    {\n                                        <span style=\"color: blue;\">if</span> (part.IsHitTestVisible)\n                                        {\n                                            GraphicsPath gp = part.Path;\n                                            <span style=\"color: blue;\">if</span> (gp.IsVisible(e.X, e.Y))\n                                            {\n                                                IsMouseOverOffsetBarPart = <span style=\"color: blue;\">true</span>;\n                                                mouseover = <span style=\"color: blue;\">true</span>;\n\n                                                <span style=\"color: blue;\">if</span> (!part.IsMouseOver)\n                                                {\n                                                    <span style=\"color: blue;\">this</span>.Cursor = Cursors.Hand;\n                                                    part.IsMouseOver = <span style=\"color: blue;\">true</span>;\n                                                    <span style=\"color: blue;\">if</span> (OnOffsetBarPartEnter != <span style=\"color: blue;\">null</span>)\n                                                    {\n                                                        OnOffsetBarPartEnter(ob, part);\n                                                    }\n                                                }\n                                            }\n                                            <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (part.IsMouseOver)\n                                            {\n                                                <span style=\"color: blue;\">if</span> (!mouseover)\n                                                    <span style=\"color: blue;\">this</span>.Cursor = Cursors.Default;\n                                                part.IsMouseOver = <span style=\"color: blue;\">false</span>;\n                                                <span style=\"color: blue;\">if</span> (OnOffsetBarPartLeave != <span style=\"color: blue;\">null</span>)\n                                                {\n                                                    OnOffsetBarPartLeave(ob, part);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                IsMouseOverOffsetBarPart = mouseover;\n            }          \n        }\n<br /></pre>\n</div>\n<p>&nbsp;</p>\n<p>So you get the idea, it's just as easy to create a new GMapRoute enhanced class, and store the graphics path of the route (if you want, with a Pen with a greater Width, so you don't have to hit it exactly with the mouse). P.S.: I got the idea with the GraphicsPath from a fork created by Knightlie.</p>",
    "PostedDate": "2012-02-16T08:03:59.647-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "769825",
    "ThreadId": "284140",
    "Html": "<p>thanks for reminder, i'll try to add this tip for routes by default</p>",
    "PostedDate": "2012-02-16T08:22:47.637-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "770459",
    "ThreadId": "284140",
    "Html": "<p>Thanks Xandolph - that screen shot looks awesome. Any chance you could share the code the for the legend \\ scale bar?</p>\n<p>Regards</p>\n<p>Charlotte</p>",
    "PostedDate": "2012-02-16T11:21:34.183-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "771432",
    "ThreadId": "284140",
    "Html": "<p>Here you go: (override OnPaintOverlays in GMapControl):</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">#region</span> Scale variables\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The font for the m/km markers</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> Font fontCustomScale = <span style=\"color: blue;\">new</span> Font(<span style=\"color: #a31515;\">\"Arial\"</span>, 6);\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The font for the scale header </span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> Font fontCustomScaleBold = <span style=\"color: blue;\">new</span> Font(<span style=\"color: #a31515;\">\"Arial\"</span>, 10, FontStyle.Bold);\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The brush for the scale's background</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> Brush brushCustomScaleBackColor = <span style=\"color: blue;\">new</span> SolidBrush(Color.FromArgb(200, 185, 215, 255));\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The Textcolor for the scale's fonts</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> Color colorCustomScaleText = Color.FromArgb(20, 65, 140);\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The width of the scale-rectangle</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> intScaleRectWidth = 300;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The height of the scale-rectangle</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> intScaleRectHeight = 50;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The height of the scale bar</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> intScaleBarHeight = 10;\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> The padding of the scale</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">int</span> intScaleLeftPadding = 10;\n\n<span style=\"color: blue;\">#endregion</span>\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: gray;\">        ///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Draw extra stuff here (E.g. a legend for the map)</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"drawingContext\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnPaintOverlays(System.Drawing.Graphics g)\n        {\n            <span style=\"color: blue;\">base</span>.OnPaintOverlays(g);\n\n            g.SmoothingMode = SmoothingMode.HighQuality;\n            <span style=\"color: blue;\">if</span> (ShowCustomScale)\n            {\n                <span style=\"color: blue;\">double</span> resolution = <span style=\"color: blue;\">this</span>.MapProvider.Projection.GetGroundResolution((<span style=\"color: blue;\">int</span>)<span style=\"color: blue;\">this</span>.Zoom, Position.Lat);\n\n                <span style=\"color: blue;\">int</span> px10 = (<span style=\"color: blue;\">int</span>)(10.0 / resolution);            <span style=\"color: green;\">// 10 meters</span>\n                <span style=\"color: blue;\">int</span> px100 = (<span style=\"color: blue;\">int</span>)(100.0 / resolution);          <span style=\"color: green;\">// 100 meters</span>\n                <span style=\"color: blue;\">int</span> px1000 = (<span style=\"color: blue;\">int</span>)(1000.0 / resolution);        <span style=\"color: green;\">// 1km   </span>\n                <span style=\"color: blue;\">int</span> px10000 = (<span style=\"color: blue;\">int</span>)(10000.0 / resolution);      <span style=\"color: green;\">// 10km  </span>\n                <span style=\"color: blue;\">int</span> px100000 = (<span style=\"color: blue;\">int</span>)(100000.0 / resolution);    <span style=\"color: green;\">// 100km  </span>\n                <span style=\"color: blue;\">int</span> px1000000 = (<span style=\"color: blue;\">int</span>)(1000000.0 / resolution);  <span style=\"color: green;\">// 1000km</span>\n                <span style=\"color: blue;\">int</span> px5000000 = (<span style=\"color: blue;\">int</span>)(5000000.0 / resolution);  <span style=\"color: green;\">// 5000km</span>\n\n                <span style=\"color: green;\">//Check how much width we have and set the scale accordingly</span>\n                <span style=\"color: blue;\">int</span> availableWidth = (intScaleRectWidth - 2 * intScaleLeftPadding);\n\n                <span style=\"color: green;\">//5000 kilometers:</span>\n                <span style=\"color: blue;\">if</span> (availableWidth &gt;= px5000000)\n                    DrawScale(g, px5000000, availableWidth, 5000, <span style=\"color: #a31515;\">\"km\"</span>);\n                <span style=\"color: green;\">//1000 kilometers:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px1000000)\n                    DrawScale(g, px1000000, availableWidth, 1000, <span style=\"color: #a31515;\">\"km\"</span>);\n                <span style=\"color: green;\">//100 kilometers:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px100000)\n                    DrawScale(g, px100000, availableWidth, 100, <span style=\"color: #a31515;\">\"km\"</span>);\n                <span style=\"color: green;\">//10 kilometers:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px10000)\n                    DrawScale(g, px10000, availableWidth, 10, <span style=\"color: #a31515;\">\"km\"</span>);\n                <span style=\"color: green;\">//1 kilometers:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px1000)\n                    DrawScale(g, px1000, availableWidth, 1, <span style=\"color: #a31515;\">\"km\"</span>);\n                <span style=\"color: green;\">//100 meters:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px100)\n                    DrawScale(g, px100, availableWidth, 100, <span style=\"color: #a31515;\">\"m\"</span>);\n                <span style=\"color: green;\">//10 meters:</span>\n                <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (availableWidth &gt;= px10)\n                    DrawScale(g, px10, availableWidth, 10, <span style=\"color: #a31515;\">\"m\"</span>);\n            }\n        }\n\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Draw the scale</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"g\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"resLength\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"availableWidth\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"totalDimenson\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"unit\"&gt;</span><span style=\"color: gray;\">&lt;/param&gt;</span>\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> DrawScale(System.Drawing.Graphics g, <span style=\"color: blue;\">int</span> resLength, <span style=\"color: blue;\">int</span> availableWidth, <span style=\"color: blue;\">int</span> totalDimenson, String unit)\n        {\n            Point p = <span style=\"color: blue;\">new</span> System.Drawing.Point(<span style=\"color: blue;\">this</span>.Width - (intScaleRectWidth + 10), <span style=\"color: blue;\">this</span>.Height - (intScaleRectHeight + 10));\n            Rectangle rect = <span style=\"color: blue;\">new</span> Rectangle(p, <span style=\"color: blue;\">new</span> Size(intScaleRectWidth, intScaleRectHeight));\n            g.FillRectangle(brushCustomScaleBackColor, rect);\n            Pen pen = <span style=\"color: blue;\">new</span> Pen(colorCustomScaleText, 1);\n            g.DrawRectangle(pen, rect);\n            SizeF stringSize = <span style=\"color: blue;\">new</span> SizeF();\n            Point pos = <span style=\"color: blue;\">new</span> Point();\n\n            <span style=\"color: green;\">//Header:</span>\n            String scaleString = <span style=\"color: #a31515;\">\"Ma&szlig;stab\"</span>;\n            stringSize = g.MeasureString(scaleString, fontCustomScaleBold);\n            pos = <span style=\"color: blue;\">new</span> Point(p.X + (rect.Width - (<span style=\"color: blue;\">int</span>)stringSize.Width) / 2, p.Y + 3);\n            g.DrawString(scaleString, fontCustomScaleBold, pen.Brush, pos);\n\n            pos = <span style=\"color: blue;\">new</span> Point(p.X + intScaleLeftPadding, pos.Y + 30);\n\n            <span style=\"color: green;\">//How many rectangles fit?</span>\n            <span style=\"color: blue;\">int</span> numRects = availableWidth / resLength;\n            Size rectSize = <span style=\"color: blue;\">new</span> Size(resLength, intScaleBarHeight);\n            <span style=\"color: green;\">//Center rectangle</span>\n            pos.X += (availableWidth - resLength * numRects) / 2;\n            <span style=\"color: green;\">//Draw rectangles:</span>\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; numRects; i++)\n            {\n                Rectangle r = <span style=\"color: blue;\">new</span> Rectangle(pos, rectSize);\n                <span style=\"color: blue;\">if</span> (i % 2 == 0)\n                    g.FillRectangle(pen.Brush, r);\n                <span style=\"color: blue;\">else</span>\n                    g.DrawRectangle(pen, r);\n                <span style=\"color: green;\">//Draw little vertical lines</span>\n                g.DrawLine(pen, pos, <span style=\"color: blue;\">new</span> Point(pos.X, pos.Y - 5));\n                <span style=\"color: green;\">//Draw labels:</span>\n                <span style=\"color: blue;\">int</span> dist = i * totalDimenson;\n                stringSize = g.MeasureString(dist + <span style=\"color: #a31515;\">\" \"</span> + unit, fontCustomScale);\n                g.DrawString(dist + <span style=\"color: #a31515;\">\" \"</span> + unit, fontCustomScale, pen.Brush, <span style=\"color: blue;\">new</span> Point(pos.X - (<span style=\"color: blue;\">int</span>)stringSize.Width / 2, pos.Y - (7 + (<span style=\"color: blue;\">int</span>)stringSize.Height)));\n                <span style=\"color: green;\">//Finally set new point</span>\n                pos = <span style=\"color: blue;\">new</span> Point(pos.X + resLength, pos.Y);\n            }\n            <span style=\"color: green;\">//Draw last line:</span>\n            g.DrawLine(pen, pos, <span style=\"color: blue;\">new</span> Point(pos.X, pos.Y - 5));\n            <span style=\"color: green;\">//Draw last label</span>\n            <span style=\"color: blue;\">int</span> m = numRects * totalDimenson;\n            stringSize = g.MeasureString(m + <span style=\"color: #a31515;\">\" \"</span> + unit, fontCustomScale);\n            g.DrawString(m + <span style=\"color: #a31515;\">\" \"</span> + unit, fontCustomScale, pen.Brush, <span style=\"color: blue;\">new</span> Point(pos.X - (<span style=\"color: blue;\">int</span>)stringSize.Width / 2, pos.Y - (7 + (<span style=\"color: blue;\">int</span>)stringSize.Height)));\n        }\n\n</pre>\n</div>\n<p>&nbsp;</p>",
    "PostedDate": "2012-02-16T15:19:24.053-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "774125",
    "ThreadId": "284140",
    "Html": "<p>status: events added</p>",
    "PostedDate": "2012-02-17T02:42:28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "774516",
    "ThreadId": "284140",
    "Html": "<p>Thanks Xandolph :-)</p>",
    "PostedDate": "2012-02-17T04:31:16.01-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "775086",
    "ThreadId": "284140",
    "Html": "<p>Thanks radioman for these events :-)</p>",
    "PostedDate": "2012-02-17T07:02:07.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]