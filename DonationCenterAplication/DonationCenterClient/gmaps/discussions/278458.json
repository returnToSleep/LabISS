[
  {
    "Id": "694329",
    "ThreadId": "278458",
    "Html": "\r\n<p>I have implemented a WMS Provider where users can specify the service url, layers, srs, etc. When they change the WMS definition, I need to clear all caches for tiles belonging to the previous definition.</p>\r\n<p>The methods I need are:<br>\r\n- GMaps.Instance.ImageCacheLocal.DeleteTiles(int dbid) <br>\r\n- GMaps.Instance.ImageCacheSecond.DeleteTiles(int dbid) <br>\r\n- GMaps.Instance.MemoryCache.DeleteTiles(int dbid)<br>\r\nWhen the tiles have been deleted I would call: MainMap.ReloadMap()</p>\r\n<p>Regarding the constructor for&nbsp; GMapProvider:<br>\r\n- Can you add a second one with Guid as a parameter?<br>\r\nI'am storing the guid in a database and would like to create the provider on request.<br>\r\n<br>\r\nThanks for an excellent product :-) &nbsp;</p>\r\n",
    "PostedDate": "2011-11-05T14:54:26.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694332",
    "ThreadId": "278458",
    "Html": "<p>dynamic provider mess up the cache, you have to deal with that yourself if you want such functionality..</p>",
    "PostedDate": "2011-11-05T15:09:59.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694432",
    "ThreadId": "278458",
    "Html": "<p>What kind of mess whould that be? I'm not changing the DbId or Guid for the provider.</p>",
    "PostedDate": "2011-11-06T04:35:16.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694434",
    "ThreadId": "278458",
    "Html": "<p>thats the problem ;}</p>",
    "PostedDate": "2011-11-06T04:53:06.063-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694463",
    "ThreadId": "278458",
    "Html": "<p>Then, what <span style=\"text-decoration: underline;\">is</span> the problem? Can you give a short explanation?</p>",
    "PostedDate": "2011-11-06T07:49:40.493-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694594",
    "ThreadId": "278458",
    "Html": "<p>you'll get cache from mixed providers</p>",
    "PostedDate": "2011-11-06T23:30:41.647-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694644",
    "ThreadId": "278458",
    "Html": "<p>That's why I asked for the DeleteTiles methods :-|</p>",
    "PostedDate": "2011-11-07T02:30:10.63-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "694687",
    "ThreadId": "278458",
    "Html": "<p>done ;}</p>\n<p><em>MainMap.Manager.PrimaryCache.<strong>DeleteOlderThan</strong>(DateTime.Now, GMapProviders.BingMap.<strong>DbId</strong>);&nbsp;</em></p>",
    "PostedDate": "2011-11-07T04:53:09.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "703776",
    "ThreadId": "278458",
    "Html": "<p>Hi orvindo,</p>\r\n<p>&nbsp;</p>\r\n<p>Could you please release your provider as a fork ?</p>\r\n<p>I'm interested to get a WMS / WFS provider. I tough to extend to provider ID to manage many tiles for a unique location with the same provider.</p>\r\n<p>I can do that.</p>\r\n<p>Regards.</p>",
    "PostedDate": "2011-11-27T00:37:02.6-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "781781",
    "ThreadId": "278458",
    "Html": "<p>Hi Guz</p>\r\n<p>Sorry for my very late answer, but here is my WMS provider implementation. As GMap needs static providers, I have created a WMSProviderBase class and derives the static providers WMSProvider1, WMSProvider2, etc from that.</p>\r\n<p>I store the parameters in a database table and initializes the providers on demand. The datatable is defined as follows: CREATE TABLE MapProvider (DbID int NOT NULL, Guid varchar(25) NOT NULL, ProviderName nvarchar(30) NOT NULL, ServiceUrl varchar(255) NOT NULL, Layer varchar(50) NOT NULL, Zoom varchar(10) NULL, Bounds varchar(50) NULL, TileFormat varchar(10) NULL, Wkt varchar(1024) NULL, BaseDbID int NULL).<br />&nbsp;&nbsp; &nbsp; <br />The only parameters that is necessary to the Init() method are url and layer.</p>\r\n<p>Regards,<br />orvindo</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Globalization;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> GMap.NET;\r\n<span style=\"color: blue;\">using</span> GMap.NET.Projections;\r\n<span style=\"color: blue;\">using</span> GMap.NET.MapProviders;\r\n<span style=\"color: blue;\">using</span> ProjNet.Converters;\r\n<span style=\"color: blue;\">using</span> ProjNet.CoordinateSystems;\r\n<span style=\"color: blue;\">using</span> ProjNet.CoordinateSystems.Transformations;\r\n\r\n[CLSCompliantAttribute(<span style=\"color: blue;\">false</span>)]\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WMSProviderBase : GMapProvider\r\n{\r\n    <span style=\"color: blue;\">bool</span> initialized;\r\n    <span style=\"color: blue;\">string</span> name = <span style=\"color: #a31515;\">\"Undefined WMS Provider\"</span>;\r\n    <span style=\"color: blue;\">string</span> url;\r\n    <span style=\"color: blue;\">string</span> layer;\r\n    <span style=\"color: blue;\">string</span> srs = <span style=\"color: #a31515;\">\"EPSG:4326\"</span>; <span style=\"color: green;\">// = WGS84</span>\r\n    <span style=\"color: blue;\">string</span> tileFormat = <span style=\"color: #a31515;\">\"png\"</span>;\r\n    ICoordinateTransformation coordTrans;\r\n    List&lt;GMapProvider&gt; overlayList;\r\n\r\n    <span style=\"color: blue;\">protected</span> WMSProviderBase()\r\n    {\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Init(<span style=\"color: blue;\">string</span> name, <span style=\"color: blue;\">string</span> url, <span style=\"color: blue;\">string</span> layer, <span style=\"color: blue;\">string</span> zoom, <span style=\"color: blue;\">string</span> bounds, <span style=\"color: blue;\">string</span> wkt, <span style=\"color: blue;\">string</span> tileformat, List&lt;GMapProvider&gt; overlays)\r\n    {\r\n        <span style=\"color: blue;\">this</span>.name = name;\r\n        <span style=\"color: blue;\">this</span>.url = url;\r\n        <span style=\"color: blue;\">this</span>.layer = layer;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(tileformat) == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">this</span>.tileFormat = tileformat;\r\n\r\n        <span style=\"color: green;\">// Set zoom levels</span>\r\n        <span style=\"color: blue;\">int</span> minzoom, maxzoom;\r\n        <span style=\"color: blue;\">bool</span> zoomOk = ParseZoom(zoom, <span style=\"color: blue;\">out</span> minzoom, <span style=\"color: blue;\">out</span> maxzoom);\r\n        <span style=\"color: blue;\">if</span> (zoomOk == <span style=\"color: blue;\">true</span> &amp;&amp; minzoom &gt;= 0) MinZoom = minzoom;\r\n        <span style=\"color: blue;\">if</span> (zoomOk == <span style=\"color: blue;\">true</span> &amp;&amp; maxzoom &gt; 0) MaxZoom = maxzoom;\r\n\r\n        <span style=\"color: green;\">// Set area (bounds)</span>\r\n        <span style=\"color: blue;\">float</span> latnorth, longwest, latsouth, longeast;\r\n        <span style=\"color: blue;\">bool</span> boundsOk = ParseBounds(bounds, <span style=\"color: blue;\">out</span> latnorth, <span style=\"color: blue;\">out</span> longwest, <span style=\"color: blue;\">out</span> latsouth, <span style=\"color: blue;\">out</span> longeast);\r\n        <span style=\"color: blue;\">if</span> (boundsOk == <span style=\"color: blue;\">true</span>) Area = <span style=\"color: blue;\">new</span> RectLatLng(latnorth, longwest, longeast - longwest, latnorth - latsouth);\r\n\r\n        <span style=\"color: green;\">// Set wkt + srs</span>\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(wkt) == <span style=\"color: blue;\">false</span>)\r\n        {\r\n            CoordinateSystemFactory csFactory = <span style=\"color: blue;\">new</span> CoordinateSystemFactory();\r\n            ICoordinateSystem coordsystem = csFactory.CreateFromWkt(wkt);\r\n            <span style=\"color: blue;\">this</span>.srs = coordsystem.Authority + <span style=\"color: #a31515;\">\":\"</span> + coordsystem.AuthorityCode.ToString(NumberFormatInfo.InvariantInfo);\r\n\r\n            CoordinateTransformationFactory transFactory = <span style=\"color: blue;\">new</span> CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">this</span>.coordTrans = transFactory.CreateFromCoordinateSystems(GeographicCoordinateSystem.WGS84, coordsystem);\r\n        }\r\n\r\n        <span style=\"color: green;\">// Overlays</span>\r\n        <span style=\"color: blue;\">this</span>.overlayList = <span style=\"color: blue;\">new</span> List&lt;GMapProvider&gt;(1);\r\n        <span style=\"color: blue;\">if</span> (overlays != <span style=\"color: blue;\">null</span>) <span style=\"color: blue;\">this</span>.overlayList.AddRange(overlays);\r\n        <span style=\"color: blue;\">this</span>.overlayList.Add(<span style=\"color: blue;\">this</span>);\r\n\r\n        <span style=\"color: blue;\">this</span>.initialized = <span style=\"color: blue;\">true</span>;\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> ParseZoom(<span style=\"color: blue;\">string</span> zoom, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> min, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> max)\r\n    {\r\n        <span style=\"color: green;\">// Format: min[empty]|max[empty] </span>\r\n        min = -1;\r\n        max = -1;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(zoom) == <span style=\"color: blue;\">true</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n\r\n        <span style=\"color: blue;\">bool</span> success = <span style=\"color: blue;\">false</span>;\r\n        <span style=\"color: blue;\">string</span>[] p = zoom.Split(<span style=\"color: #a31515;\">'|'</span>);\r\n        <span style=\"color: blue;\">if</span> (p.Length == 2)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (p[0].Length &gt; 0) <span style=\"color: blue;\">int</span>.TryParse(p[0], NumberStyles.Integer, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> min);\r\n            <span style=\"color: blue;\">if</span> (p[1].Length &gt; 0) <span style=\"color: blue;\">int</span>.TryParse(p[1], NumberStyles.Integer, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> max);\r\n            <span style=\"color: blue;\">if</span> (min &gt;= 0 || max &gt;= 0) success = <span style=\"color: blue;\">true</span>;\r\n        }\r\n        <span style=\"color: blue;\">return</span> success;\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> ParseBounds(<span style=\"color: blue;\">string</span> bounds, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> latnorth, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> longwest, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> latsouth, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> longeast)\r\n    {\r\n        <span style=\"color: green;\">// Format: LatNorth;LongWest|LatSouth;LongEast </span>\r\n        latnorth = 0f;\r\n        longwest = 0f;\r\n        latsouth = 0f;\r\n        longeast = 0f;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(bounds) == <span style=\"color: blue;\">true</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n\r\n        <span style=\"color: blue;\">bool</span> success = <span style=\"color: blue;\">false</span>;\r\n        <span style=\"color: blue;\">string</span>[] p = bounds.Replace(<span style=\"color: #a31515;\">','</span>, <span style=\"color: #a31515;\">'.'</span>).Split(<span style=\"color: #a31515;\">'|'</span>);\r\n        <span style=\"color: blue;\">if</span> (p.Length == 2)\r\n        {\r\n            <span style=\"color: blue;\">string</span>[] p0 = p[0].Split(<span style=\"color: #a31515;\">';'</span>);\r\n            <span style=\"color: blue;\">string</span>[] p1 = p[1].Split(<span style=\"color: #a31515;\">';'</span>);\r\n            <span style=\"color: blue;\">if</span> (p0.Length == 2 &amp;&amp; p1.Length == 2)\r\n            {\r\n                <span style=\"color: blue;\">bool</span> parseOk = <span style=\"color: blue;\">float</span>.TryParse(p0[0], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> latnorth);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p0[1], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> longwest);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p1[0], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> latsouth);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p1[1], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> longeast);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>)\r\n                {\r\n                    <span style=\"color: blue;\">if</span> (latnorth &gt; latsouth &amp;&amp; longeast &gt; longwest) success = <span style=\"color: blue;\">true</span>;\r\n                }\r\n            }\r\n        }\r\n        <span style=\"color: blue;\">return</span> success;\r\n    }\r\n\r\n    <span style=\"color: blue;\">#region</span> GMapProvider Members\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> Guid Id\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> Guid.Empty; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">string</span> Name\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.name; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> GMapProvider[] Overlays\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.overlayList.ToArray(); }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> PureProjection Projection\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> MercatorProjection.Instance; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> PureImage GetTileImage(GPoint pos, <span style=\"color: blue;\">int</span> zoom)\r\n    {\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.initialized == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\r\n\r\n        <span style=\"color: blue;\">string</span> tileUrl = MakeTileImageUrl(pos, zoom, LanguageStr);\r\n        <span style=\"color: blue;\">return</span> GetTileImageUsingHttp(tileUrl);\r\n    }\r\n\r\n    <span style=\"color: blue;\">#endregion</span>\r\n\r\n    <span style=\"color: blue;\">string</span> MakeTileImageUrl(GPoint pos, <span style=\"color: blue;\">int</span> zoom, <span style=\"color: blue;\">string</span> language)\r\n    {\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.initialized == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">string</span>.Empty;\r\n\r\n        GPoint px1 = Projection.FromTileXYToPixel(pos);\r\n        GPoint px2 = px1;\r\n\r\n        px1.Offset(0, Projection.TileSize.Height);\r\n        PointLatLng p1 = Projection.FromPixelToLatLng(px1, zoom);\r\n\r\n        px2.Offset(Projection.TileSize.Width, 0);\r\n        PointLatLng p2 = Projection.FromPixelToLatLng(px2, zoom);\r\n\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.coordTrans != <span style=\"color: blue;\">null</span>)\r\n        {\r\n            <span style=\"color: blue;\">double</span>[] convp1 = <span style=\"color: blue;\">this</span>.coordTrans.MathTransform.Transform(<span style=\"color: blue;\">new</span> <span style=\"color: blue;\">double</span>[] { p1.Lat, p1.Lng });\r\n            p1.Lat = Math.Round(convp1[0], 6);\r\n            p1.Lng = Math.Round(convp1[1], 6);\r\n            <span style=\"color: blue;\">double</span>[] convp2 = <span style=\"color: blue;\">this</span>.coordTrans.MathTransform.Transform(<span style=\"color: blue;\">new</span> <span style=\"color: blue;\">double</span>[] { p2.Lat, p2.Lng });\r\n            p2.Lat = Math.Round(convp2[0], 6);\r\n            p2.Lng = Math.Round(convp2[1], 6);\r\n        }\r\n\r\n        <span style=\"color: blue;\">string</span> ret = <span style=\"color: blue;\">string</span>.Format(CultureInfo.InvariantCulture, UrlFormat, <span style=\"color: blue;\">this</span>.url, <span style=\"color: blue;\">this</span>.layer,\r\n            p1.Lng.ToString(NumberFormatInfo.InvariantInfo), p1.Lat.ToString(NumberFormatInfo.InvariantInfo),\r\n            p2.Lng.ToString(NumberFormatInfo.InvariantInfo), p2.Lat.ToString(NumberFormatInfo.InvariantInfo),\r\n            Projection.TileSize.Width.ToString(NumberFormatInfo.InvariantInfo), Projection.TileSize.Height.ToString(NumberFormatInfo.InvariantInfo),\r\n            <span style=\"color: blue;\">this</span>.srs, <span style=\"color: #a31515;\">\"image/\"</span> + <span style=\"color: blue;\">this</span>.tileFormat);\r\n        <span style=\"color: blue;\">return</span> ret;\r\n    }\r\n\r\n    <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">string</span> UrlFormat = <span style=\"color: #a31515;\">\"{0}?service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;layers={1}&amp;styles=&amp;bbox={2},{3},{4},{5}&amp;width={6}&amp;height={7}&amp;srs={8}&amp;format={9}&amp;transparent=true\"</span>;\r\n}\r\n\r\n[CLSCompliantAttribute(<span style=\"color: blue;\">false</span>)]\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WMSProvider1 : WMSProviderBase\r\n{\r\n    <span style=\"color: blue;\">readonly</span> Guid id = <span style=\"color: blue;\">new</span> Guid(<span style=\"color: #a31515;\">\"CAF1D2FB-FA91-0576-A1BB-FB43128EBCFF\"</span>);\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> WMSProvider1 Instance;\r\n\r\n    WMSProvider1()\r\n    {\r\n    }\r\n\r\n    <span style=\"color: blue;\">static</span> WMSProvider1()\r\n    {\r\n        Instance = <span style=\"color: blue;\">new</span> WMSProvider1();\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> Guid Id\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> id; }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\">using System;<br />using System.Collections.Generic;<br />using System.Globalization;<br />using System.Text;<br />using GMap.NET;<br />using GMap.NET.Projections;<br />using GMap.NET.MapProviders;<br />using ProjNet.Converters;<br />using ProjNet.CoordinateSystems;<br />using ProjNet.CoordinateSystems.Transformations;<br /><br />[CLSCompliantAttribute(false)]<br />public class WMSProviderBase : GMapProvider<br />{<br />&nbsp;&nbsp;&nbsp; bool initialized;<br />&nbsp;&nbsp;&nbsp; string name = \"Undefined WMS Provider\";<br />&nbsp;&nbsp;&nbsp; string url;<br />&nbsp;&nbsp;&nbsp; string layer;<br />&nbsp;&nbsp;&nbsp; string srs = \"EPSG:4326\"; // = WGS84<br />&nbsp;&nbsp;&nbsp; string tileFormat = \"png\";<br />&nbsp;&nbsp;&nbsp; ICoordinateTransformation coordTrans;<br />&nbsp;&nbsp;&nbsp; List&lt;GMapProvider&gt; overlayList;<br /><br />&nbsp;&nbsp;&nbsp; protected WMSProviderBase()<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public void Init(string name, string url, string layer, string zoom, string bounds, string wkt, string tileformat, List&lt;GMapProvider&gt; overlays)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.url = url;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.layer = layer;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (string.IsNullOrEmpty(tileformat) == false) this.tileFormat = tileformat;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set zoom levels<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int minzoom, maxzoom;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool zoomOk = ParseZoom(zoom, out minzoom, out maxzoom);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (zoomOk == true &amp;&amp; minzoom &gt;= 0) MinZoom = minzoom;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (zoomOk == true &amp;&amp; maxzoom &gt; 0) MaxZoom = maxzoom;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set area (bounds)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float latnorth, longwest, latsouth, longeast;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool boundsOk = ParseBounds(bounds, out latnorth, out longwest, out latsouth, out longeast);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (boundsOk == true) Area = new RectLatLng(latnorth, longwest, longeast - longwest, latnorth - latsouth);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set wkt + srs<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (string.IsNullOrEmpty(wkt) == false)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CoordinateSystemFactory csFactory = new CoordinateSystemFactory();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICoordinateSystem coordsystem = csFactory.CreateFromWkt(wkt);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.srs = coordsystem.Authority + \":\" + coordsystem.AuthorityCode.ToString(NumberFormatInfo.InvariantInfo);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CoordinateTransformationFactory transFactory = new CoordinateTransformationFactory();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.coordTrans = transFactory.CreateFromCoordinateSystems(GeographicCoordinateSystem.WGS84, coordsystem);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Overlays<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.overlayList = new List&lt;GMapProvider&gt;(1);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (overlays != null) this.overlayList.AddRange(overlays);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.overlayList.Add(this);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.initialized = true;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public static bool ParseZoom(string zoom, out int min, out int max)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Format: min[empty]|max[empty] <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; min = -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max = -1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (string.IsNullOrEmpty(zoom) == true) return true;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool success = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] p = zoom.Split('|');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p.Length == 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p[0].Length &gt; 0) int.TryParse(p[0], NumberStyles.Integer, CultureInfo.InvariantCulture, out min);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p[1].Length &gt; 0) int.TryParse(p[1], NumberStyles.Integer, CultureInfo.InvariantCulture, out max);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (min &gt;= 0 || max &gt;= 0) success = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return success;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public static bool ParseBounds(string bounds, out float latnorth, out float longwest, out float latsouth, out float longeast)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Format: LatNorth;LongWest|LatSouth;LongEast <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; latnorth = 0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longwest = 0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; latsouth = 0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; longeast = 0f;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (string.IsNullOrEmpty(bounds) == true) return true;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool success = false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] p = bounds.Replace(',', '.').Split('|');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p.Length == 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] p0 = p[0].Split(';');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] p1 = p[1].Split(';');<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p0.Length == 2 &amp;&amp; p1.Length == 2)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool parseOk = float.TryParse(p0[0], NumberStyles.Float, CultureInfo.InvariantCulture, out latnorth);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (parseOk == true) parseOk = float.TryParse(p0[1], NumberStyles.Float, CultureInfo.InvariantCulture, out longwest);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (parseOk == true) parseOk = float.TryParse(p1[0], NumberStyles.Float, CultureInfo.InvariantCulture, out latsouth);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (parseOk == true) parseOk = float.TryParse(p1[1], NumberStyles.Float, CultureInfo.InvariantCulture, out longeast);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (parseOk == true)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (latnorth &gt; latsouth &amp;&amp; longeast &gt; longwest) success = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return success;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; #region GMapProvider Members<br /><br />&nbsp;&nbsp;&nbsp; public override Guid Id<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return Guid.Empty; }<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public override string Name<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return this.name; }<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public override GMapProvider[] Overlays<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return this.overlayList.ToArray(); }<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public override PureProjection Projection<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return MercatorProjection.Instance; }<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public override PureImage GetTileImage(GPoint pos, int zoom)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this.initialized == false) return null;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string tileUrl = MakeTileImageUrl(pos, zoom, LanguageStr);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return GetTileImageUsingHttp(tileUrl);<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; #endregion<br /><br />&nbsp;&nbsp;&nbsp; string MakeTileImageUrl(GPoint pos, int zoom, string language)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this.initialized == false) return string.Empty;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPoint px1 = Projection.FromTileXYToPixel(pos);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GPoint px2 = px1;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; px1.Offset(0, Projection.TileSize.Height);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointLatLng p1 = Projection.FromPixelToLatLng(px1, zoom);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; px2.Offset(Projection.TileSize.Width, 0);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointLatLng p2 = Projection.FromPixelToLatLng(px2, zoom);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this.coordTrans != null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] convp1 = this.coordTrans.MathTransform.Transform(new double[] { p1.Lat, p1.Lng });<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p1.Lat = Math.Round(convp1[0], 6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p1.Lng = Math.Round(convp1[1], 6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] convp2 = this.coordTrans.MathTransform.Transform(new double[] { p2.Lat, p2.Lng });<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p2.Lat = Math.Round(convp2[0], 6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p2.Lng = Math.Round(convp2[1], 6);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string ret = string.Format(CultureInfo.InvariantCulture, UrlFormat, this.url, this.layer,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p1.Lng.ToString(NumberFormatInfo.InvariantInfo), p1.Lat.ToString(NumberFormatInfo.InvariantInfo),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p2.Lng.ToString(NumberFormatInfo.InvariantInfo), p2.Lat.ToString(NumberFormatInfo.InvariantInfo),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Projection.TileSize.Width.ToString(NumberFormatInfo.InvariantInfo), Projection.TileSize.Height.ToString(NumberFormatInfo.InvariantInfo),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.srs, \"image/\" + this.tileFormat);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ret;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; const string UrlFormat = \"{0}?service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;layers={1}&amp;styles=&amp;bbox={2},{3},{4},{5}&amp;width={6}&amp;height={7}&amp;srs={8}&amp;format={9}&amp;transparent=true\";<br />}<br /><br />[CLSCompliantAttribute(false)]<br />public class WMSProvider1 : WMSProviderBase<br />{<br />&nbsp;&nbsp;&nbsp; readonly Guid id = new Guid(\"CAF1D2FB-FA91-0576-A1BB-FB43128EBCFF\");<br />&nbsp;&nbsp;&nbsp; public static readonly WMSProvider1 Instance;<br /><br />&nbsp;&nbsp;&nbsp; WMSProvider1()<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; static WMSProvider1()<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Instance = new WMSProvider1();<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; public override Guid Id<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return id; }<br />&nbsp;&nbsp;&nbsp; }<br />}<br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Globalization;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> GMap.NET;\r\n<span style=\"color: blue;\">using</span> GMap.NET.Projections;\r\n<span style=\"color: blue;\">using</span> GMap.NET.MapProviders;\r\n<span style=\"color: blue;\">using</span> ProjNet.Converters;\r\n<span style=\"color: blue;\">using</span> ProjNet.CoordinateSystems;\r\n<span style=\"color: blue;\">using</span> ProjNet.CoordinateSystems.Transformations;\r\n\r\n[CLSCompliantAttribute(<span style=\"color: blue;\">false</span>)]\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WMSProviderBase : GMapProvider\r\n{\r\n    <span style=\"color: blue;\">bool</span> initialized;\r\n    <span style=\"color: blue;\">string</span> name = <span style=\"color: #a31515;\">\"Undefined WMS Provider\"</span>;\r\n    <span style=\"color: blue;\">string</span> url;\r\n    <span style=\"color: blue;\">string</span> layer;\r\n    <span style=\"color: blue;\">string</span> srs = <span style=\"color: #a31515;\">\"EPSG:4326\"</span>; <span style=\"color: green;\">// = WGS84</span>\r\n    <span style=\"color: blue;\">string</span> tileFormat = <span style=\"color: #a31515;\">\"png\"</span>;\r\n    ICoordinateTransformation coordTrans;\r\n    List&lt;GMapProvider&gt; overlayList;\r\n\r\n    <span style=\"color: blue;\">protected</span> WMSProviderBase()\r\n    {\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Init(<span style=\"color: blue;\">string</span> name, <span style=\"color: blue;\">string</span> url, <span style=\"color: blue;\">string</span> layer, <span style=\"color: blue;\">string</span> zoom, <span style=\"color: blue;\">string</span> bounds, <span style=\"color: blue;\">string</span> wkt, <span style=\"color: blue;\">string</span> tileformat, List&lt;GMapProvider&gt; overlays)\r\n    {\r\n        <span style=\"color: blue;\">this</span>.name = name;\r\n        <span style=\"color: blue;\">this</span>.url = url;\r\n        <span style=\"color: blue;\">this</span>.layer = layer;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(tileformat) == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">this</span>.tileFormat = tileformat;\r\n\r\n        <span style=\"color: green;\">// Set zoom levels</span>\r\n        <span style=\"color: blue;\">int</span> minzoom, maxzoom;\r\n        <span style=\"color: blue;\">bool</span> zoomOk = ParseZoom(zoom, <span style=\"color: blue;\">out</span> minzoom, <span style=\"color: blue;\">out</span> maxzoom);\r\n        <span style=\"color: blue;\">if</span> (zoomOk == <span style=\"color: blue;\">true</span> &amp;&amp; minzoom &gt;= 0) MinZoom = minzoom;\r\n        <span style=\"color: blue;\">if</span> (zoomOk == <span style=\"color: blue;\">true</span> &amp;&amp; maxzoom &gt; 0) MaxZoom = maxzoom;\r\n\r\n        <span style=\"color: green;\">// Set area (bounds)</span>\r\n        <span style=\"color: blue;\">float</span> latnorth, longwest, latsouth, longeast;\r\n        <span style=\"color: blue;\">bool</span> boundsOk = ParseBounds(bounds, <span style=\"color: blue;\">out</span> latnorth, <span style=\"color: blue;\">out</span> longwest, <span style=\"color: blue;\">out</span> latsouth, <span style=\"color: blue;\">out</span> longeast);\r\n        <span style=\"color: blue;\">if</span> (boundsOk == <span style=\"color: blue;\">true</span>) Area = <span style=\"color: blue;\">new</span> RectLatLng(latnorth, longwest, longeast - longwest, latnorth - latsouth);\r\n\r\n        <span style=\"color: green;\">// Set wkt + srs</span>\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(wkt) == <span style=\"color: blue;\">false</span>)\r\n        {\r\n            CoordinateSystemFactory csFactory = <span style=\"color: blue;\">new</span> CoordinateSystemFactory();\r\n            ICoordinateSystem coordsystem = csFactory.CreateFromWkt(wkt);\r\n            <span style=\"color: blue;\">this</span>.srs = coordsystem.Authority + <span style=\"color: #a31515;\">\":\"</span> + coordsystem.AuthorityCode.ToString(NumberFormatInfo.InvariantInfo);\r\n\r\n            CoordinateTransformationFactory transFactory = <span style=\"color: blue;\">new</span> CoordinateTransformationFactory();\r\n            <span style=\"color: blue;\">this</span>.coordTrans = transFactory.CreateFromCoordinateSystems(GeographicCoordinateSystem.WGS84, coordsystem);\r\n        }\r\n\r\n        <span style=\"color: green;\">// Overlays</span>\r\n        <span style=\"color: blue;\">this</span>.overlayList = <span style=\"color: blue;\">new</span> List&lt;GMapProvider&gt;(1);\r\n        <span style=\"color: blue;\">if</span> (overlays != <span style=\"color: blue;\">null</span>) <span style=\"color: blue;\">this</span>.overlayList.AddRange(overlays);\r\n        <span style=\"color: blue;\">this</span>.overlayList.Add(<span style=\"color: blue;\">this</span>);\r\n\r\n        <span style=\"color: blue;\">this</span>.initialized = <span style=\"color: blue;\">true</span>;\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> ParseZoom(<span style=\"color: blue;\">string</span> zoom, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> min, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">int</span> max)\r\n    {\r\n        <span style=\"color: green;\">// Format: min[empty]|max[empty] </span>\r\n        min = -1;\r\n        max = -1;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(zoom) == <span style=\"color: blue;\">true</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n\r\n        <span style=\"color: blue;\">bool</span> success = <span style=\"color: blue;\">false</span>;\r\n        <span style=\"color: blue;\">string</span>[] p = zoom.Split(<span style=\"color: #a31515;\">'|'</span>);\r\n        <span style=\"color: blue;\">if</span> (p.Length == 2)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (p[0].Length &gt; 0) <span style=\"color: blue;\">int</span>.TryParse(p[0], NumberStyles.Integer, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> min);\r\n            <span style=\"color: blue;\">if</span> (p[1].Length &gt; 0) <span style=\"color: blue;\">int</span>.TryParse(p[1], NumberStyles.Integer, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> max);\r\n            <span style=\"color: blue;\">if</span> (min &gt;= 0 || max &gt;= 0) success = <span style=\"color: blue;\">true</span>;\r\n        }\r\n        <span style=\"color: blue;\">return</span> success;\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> ParseBounds(<span style=\"color: blue;\">string</span> bounds, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> latnorth, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> longwest, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> latsouth, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">float</span> longeast)\r\n    {\r\n        <span style=\"color: green;\">// Format: LatNorth;LongWest|LatSouth;LongEast </span>\r\n        latnorth = 0f;\r\n        longwest = 0f;\r\n        latsouth = 0f;\r\n        longeast = 0f;\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(bounds) == <span style=\"color: blue;\">true</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n\r\n        <span style=\"color: blue;\">bool</span> success = <span style=\"color: blue;\">false</span>;\r\n        <span style=\"color: blue;\">string</span>[] p = bounds.Replace(<span style=\"color: #a31515;\">','</span>, <span style=\"color: #a31515;\">'.'</span>).Split(<span style=\"color: #a31515;\">'|'</span>);\r\n        <span style=\"color: blue;\">if</span> (p.Length == 2)\r\n        {\r\n            <span style=\"color: blue;\">string</span>[] p0 = p[0].Split(<span style=\"color: #a31515;\">';'</span>);\r\n            <span style=\"color: blue;\">string</span>[] p1 = p[1].Split(<span style=\"color: #a31515;\">';'</span>);\r\n            <span style=\"color: blue;\">if</span> (p0.Length == 2 &amp;&amp; p1.Length == 2)\r\n            {\r\n                <span style=\"color: blue;\">bool</span> parseOk = <span style=\"color: blue;\">float</span>.TryParse(p0[0], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> latnorth);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p0[1], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> longwest);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p1[0], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> latsouth);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>) parseOk = <span style=\"color: blue;\">float</span>.TryParse(p1[1], NumberStyles.Float, CultureInfo.InvariantCulture, <span style=\"color: blue;\">out</span> longeast);\r\n                <span style=\"color: blue;\">if</span> (parseOk == <span style=\"color: blue;\">true</span>)\r\n                {\r\n                    <span style=\"color: blue;\">if</span> (latnorth &gt; latsouth &amp;&amp; longeast &gt; longwest) success = <span style=\"color: blue;\">true</span>;\r\n                }\r\n            }\r\n        }\r\n        <span style=\"color: blue;\">return</span> success;\r\n    }\r\n\r\n    <span style=\"color: blue;\">#region</span> GMapProvider Members\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> Guid Id\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> Guid.Empty; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">string</span> Name\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.name; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> GMapProvider[] Overlays\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.overlayList.ToArray(); }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> PureProjection Projection\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> MercatorProjection.Instance; }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> PureImage GetTileImage(GPoint pos, <span style=\"color: blue;\">int</span> zoom)\r\n    {\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.initialized == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\r\n\r\n        <span style=\"color: blue;\">string</span> tileUrl = MakeTileImageUrl(pos, zoom, LanguageStr);\r\n        <span style=\"color: blue;\">return</span> GetTileImageUsingHttp(tileUrl);\r\n    }\r\n\r\n    <span style=\"color: blue;\">#endregion</span>\r\n\r\n    <span style=\"color: blue;\">string</span> MakeTileImageUrl(GPoint pos, <span style=\"color: blue;\">int</span> zoom, <span style=\"color: blue;\">string</span> language)\r\n    {\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.initialized == <span style=\"color: blue;\">false</span>) <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">string</span>.Empty;\r\n\r\n        GPoint px1 = Projection.FromTileXYToPixel(pos);\r\n        GPoint px2 = px1;\r\n\r\n        px1.Offset(0, Projection.TileSize.Height);\r\n        PointLatLng p1 = Projection.FromPixelToLatLng(px1, zoom);\r\n\r\n        px2.Offset(Projection.TileSize.Width, 0);\r\n        PointLatLng p2 = Projection.FromPixelToLatLng(px2, zoom);\r\n\r\n        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.coordTrans != <span style=\"color: blue;\">null</span>)\r\n        {\r\n            <span style=\"color: blue;\">double</span>[] convp1 = <span style=\"color: blue;\">this</span>.coordTrans.MathTransform.Transform(<span style=\"color: blue;\">new</span> <span style=\"color: blue;\">double</span>[] { p1.Lat, p1.Lng });\r\n            p1.Lat = Math.Round(convp1[0], 6);\r\n            p1.Lng = Math.Round(convp1[1], 6);\r\n            <span style=\"color: blue;\">double</span>[] convp2 = <span style=\"color: blue;\">this</span>.coordTrans.MathTransform.Transform(<span style=\"color: blue;\">new</span> <span style=\"color: blue;\">double</span>[] { p2.Lat, p2.Lng });\r\n            p2.Lat = Math.Round(convp2[0], 6);\r\n            p2.Lng = Math.Round(convp2[1], 6);\r\n        }\r\n\r\n        <span style=\"color: blue;\">string</span> ret = <span style=\"color: blue;\">string</span>.Format(CultureInfo.InvariantCulture, UrlFormat, <span style=\"color: blue;\">this</span>.url, <span style=\"color: blue;\">this</span>.layer,\r\n            p1.Lng.ToString(NumberFormatInfo.InvariantInfo), p1.Lat.ToString(NumberFormatInfo.InvariantInfo),\r\n            p2.Lng.ToString(NumberFormatInfo.InvariantInfo), p2.Lat.ToString(NumberFormatInfo.InvariantInfo),\r\n            Projection.TileSize.Width.ToString(NumberFormatInfo.InvariantInfo), Projection.TileSize.Height.ToString(NumberFormatInfo.InvariantInfo),\r\n            <span style=\"color: blue;\">this</span>.srs, <span style=\"color: #a31515;\">\"image/\"</span> + <span style=\"color: blue;\">this</span>.tileFormat);\r\n        <span style=\"color: blue;\">return</span> ret;\r\n    }\r\n\r\n    <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">string</span> UrlFormat = <span style=\"color: #a31515;\">\"{0}?service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;layers={1}&amp;styles=&amp;bbox={2},{3},{4},{5}&amp;width={6}&amp;height={7}&amp;srs={8}&amp;format={9}&amp;transparent=true\"</span>;\r\n}\r\n\r\n[CLSCompliantAttribute(<span style=\"color: blue;\">false</span>)]\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WMSProvider1 : WMSProviderBase\r\n{\r\n    <span style=\"color: blue;\">readonly</span> Guid id = <span style=\"color: blue;\">new</span> Guid(<span style=\"color: #a31515;\">\"CAF1D2FB-FA91-0576-A1BB-FB43128EBCFF\"</span>);\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> WMSProvider1 Instance;\r\n\r\n    WMSProvider1()\r\n    {\r\n    }\r\n\r\n    <span style=\"color: blue;\">static</span> WMSProvider1()\r\n    {\r\n        Instance = <span style=\"color: blue;\">new</span> WMSProvider1();\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> Guid Id\r\n    {\r\n        <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> id; }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</div>",
    "PostedDate": "2012-02-19T15:49:06.15-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "915925",
    "ThreadId": "278458",
    "Html": "<p>I would like to do something much like this, however i hope to avoid hard coded classes like WMSProvider1 etc. I may have many, really it will be up to the user how many MapProvider they wish to add.</p>\r\n<p>Ideally i would like to construct classes inherited from GMapProvider, and provide a unique GUID for each in the constructor.</p>\r\n<p>If i derive any class from GMapProvider, then the base class constructor checks the GUID is unique, and fails.</p>\r\n<p>I'd like to be able to pass in a unique GUID when GMapProvider is intantiated.</p>\r\n<p>Any ideas on how to do this?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-09-21T13:31:08.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "956809",
    "ThreadId": "278458",
    "Html": "\r\n<p>well have you succeeded to add the WMSProvider? Can it work? Today I also try to add a BaiDu Map Provider, but when I try to get the map, nothing return for me!</p>\r\n",
    "PostedDate": "2012-12-17T01:14:27.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "956911",
    "ThreadId": "278458",
    "Html": "\r\n<p>1) I would be interested to know the GetCapabilities URL for access to BaiDu using WMS - does it actually support WMS?</p>\r\n<p>&nbsp;</p>\r\n<p>2) I have hard coded classes with fixed GUID. Ideally i would like to generate a new GUID for each new map and be able to add it without compiling the code but i have not done this.</p>\r\n",
    "PostedDate": "2012-12-17T04:54:47.797-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "957336",
    "ThreadId": "278458",
    "Html": "\r\n<p>well, there is a MakeTileImageUrl function for getting the tile url, and I don't know what the url format mean? Where the url format come from?</p>\r\n",
    "PostedDate": "2012-12-17T16:47:36.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1004542",
    "ThreadId": "278458",
    "Html": "MakeTileImageUrl is a method of the provider.<br />\n<br />\nSomething like this. This is a example of the MakeTileImageUrl in the custom provider i wrote to get multiple maps from a local tile server.<br />\nWorks like a charme. I use maperative latest version to generate tiles from an image.<br />\nCaching is a problem, Guid is readonly. I have made the DbId public and set these for each map a load. That works for the database cache (secondairy) but not for the primairy cache and memory cache.<br />\n<br />\nWould be nice to have multiple instances of the Gmap control.<br />\n<pre><code>  string MakeTileImageUrl(GPoint pos, int zoom, string language)\n      {\n          string tileUrl = string.Format(UrlFormat, TileServerUrl, zoom, pos.X, pos.Y, baseFormatExt);\n          return tileUrl; \n      }\n\n      static readonly string baseFormatExt = &quot;.png&quot;;\n      static readonly string UrlFormat = &quot;http://{0}/{1}/{2}/{3}{4}&quot;;</code></pre>\n\n",
    "PostedDate": "2013-02-21T02:05:05.977-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1004693",
    "ThreadId": "278458",
    "Html": "guid should be readonly, but you can use whatever guid you want,  you don't have to change anything, it can be hash of TileServerUrl or something...<br />\n",
    "PostedDate": "2013-02-21T07:24:27.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1091907",
    "ThreadId": "278458",
    "Html": "Hi<br />\n@orvindo  could you post your working project code ?<br />\nI am stuck at using the new WMS provider <br />\nI could not figure out how you managed to send the Url and layer dynamically.<br />\n<br />\nRegards<br />\nprad<br />\n",
    "PostedDate": "2013-09-12T13:48:38.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1429887",
    "ThreadId": "278458",
    "Html": "Hi,\r<br />\n<br />\nI use WMSProviderBase class and work fine, but how can I have multiple WMS layer? Into WMSProviderBase class I see overlayList, but how can I use and declare it?\r<br />\n<br />\nregards<br />\n",
    "PostedDate": "2015-06-10T05:31:33.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1429907",
    "ThreadId": "278458",
    "Html": "The only way I have found is to derive new classes like this (note that each class must have their own guid):<br />\n<pre><code>    [CLSCompliantAttribute(false)]\n    public class WMSProvider1 : WMSProviderBase\n    {\n        readonly Guid id = new Guid(&quot;CAF1D2FB-FA91-0576-A1BB-FB43128EBCFF&quot;);\n        public static readonly WMSProvider1 Instance;\n\n        WMSProvider1()\n        {\n        }\n\n        static WMSProvider1()\n        {\n            Instance = new WMSProvider1();\n        }\n\n        public override Guid Id\n        {\n            get { return id; }\n        }\n    }\n</code></pre>\n\n",
    "PostedDate": "2015-06-10T07:06:56.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]